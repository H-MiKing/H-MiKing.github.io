<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络原理(自考)</title>
      <link href="/2023/10/10/04741%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86(%E8%87%AA%E8%80%83)/"/>
      <url>/2023/10/10/04741%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86(%E8%87%AA%E8%80%83)/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h2><h3 id="1-1-计算机网络的概念"><a href="#1-1-计算机网络的概念" class="headerlink" title="1.1 计算机网络的概念"></a>1.1 计算机网络的概念</h3><p>1、计算机网络的定义<br>计算机网络是互连的、自治的计算机的集合。</p><p>2、协议的定义<br>协议是网络通信实体之间在数据交换过程中需要遵循的规则或约定，是计算机网络有序运行的重要保证。</p><p>3、协议的3个要素</p><blockquote><p>(1)语法：定义实体之间交换信息的格式与结构，或者定义实体（比如硬件设备）之间传输信号的电平等。<br>(2)语义：定义实体之间交换的信息中需要发送（或包含）哪些控制信息，这些信息的具体含义，以及针对不同含义的控制信息，接收信息端应如何响应。<br>(3)时序：定义实体之间交换信息的顺序以及如何匹配或适应彼此的速度。</p></blockquote><p>4、计算机网络的功能</p><blockquote><p>(1)硬件资源共享。<br>(2)软件资源共享。<br>(3)信息资源共享。</p></blockquote><p>5、计算机网络的分类</p><blockquote><p>(1)按覆盖范围分类：个域网、局域网、城域网、广域网。<br>(2)按拓扑结构分类(6类)：星形拓扑结构、总线型拓扑结构、环形拓扑结构、网状拓扑结构、树形拓扑结构、混合拓扑结构。<br>(3)按交换方式分类：电路交换网络、报文交换网络、分组交换网络。<br>(4)按网络用户属性分类：公用网、专用网。</p></blockquote><h3 id="1-2-计算机网络结构"><a href="#1-2-计算机网络结构" class="headerlink" title="1.2 计算机网络结构"></a>1.2 计算机网络结构</h3><p>1、网络边缘<br>连接到网络上的所有端系统构成了网络边缘。</p><p>2、接入网络<br>常见的接入网络技术包括：电话拨号接入、非对称数字用户线路ADSL、混合光纤同轴电缆HFC接入网络、局域网、移动接入网络。</p><p>3、网络核心<br>网络核心是由通信链路互连的分组交换设备构成的网络，作用是实现网络边缘中主机之间的数据中继与转发。</p><h3 id="1-3-数据交换技术"><a href="#1-3-数据交换技术" class="headerlink" title="1.3 数据交换技术"></a>1.3 数据交换技术</h3><p>一、数据交换的概念<br>(1)数据交换是实现在大规模网络核心上进行数据传输的技术基础。<br>(2)常见的数据交换技术包括：电路交换、报文交换、分组交换。</p><p>二、电路交换<br>利用电路交换进行通信需要3个阶段：建立电路、传输数据、拆除电路。</p><p>三、报文交换<br>报文交换也称为消息交换，其工作过程为：发送方把要发送的信息附加上发送&#x2F;接收主机的地址及其他控制信息，构成一个完整的报文。然后以报文为单位在交换网络的各结点之间以存储-转发的方式传送，直至送达目的主机。</p><p>四、分组交换</p><ol><li>分组交换基本原理<br>分组交换是目前计算机网络广泛采用的技术。分组交换需要将待传输数据（即报文）分割成较小的数据块，每个数据块附加上地址、序号等控制信息构成数据分组（packet)，每个分组独立传输到目的地，目的地将收到的分组重新组装，还原为报文。分组传输过程通常也采用存储-转发交换方式。</li><li>分组交换的优点<br>(1)交换设备存储容量要求低。<br>(2)交换速度快。<br>(3)可靠传输效率高。<br>(4)更加公平。</li></ol><h3 id="1-4-计算机网络性能"><a href="#1-4-计算机网络性能" class="headerlink" title="1.4 计算机网络性能"></a>1.4 计算机网络性能</h3><p>一、速率与带宽<br>(1)速率是指网络单位时间内传送的数据量，用以描述网络传输数据的快慢，也称为数据传输速率或数据速率。速率的基本单位是bit&#x2F;s(位每秒）。<br>(2)一条链路或信道能够不失真地传播电磁信号的最高频率与最低频率之差，称为信道的带宽，单位是Hz。</p><p>二、时延<br>(1)时延是指数据从网络中的一个结点（主机或交换设备等）到达另一结点所需要的时间。<br>(2)分组的每跳传输过程主要产生4类时间延迟：结点处理时延、排队时延、传输时延和传播时延。</p><p>三、时延带宽积<br>一段物理链路的传播时延与链路带宽的乘积，称为时延带宽积。</p><p>四、丢包率<br>丢包率常被用于评价和衡量网络性能的指标，在很大程度上可以反映网络的拥塞程度，因为引发网络丢包的主要因素是网络拥塞。</p><p>五、吞吐量<br>吞吐量表示在单位时间内源主机通过网络向目的主机实际送达的数据量，单位为bit&#x2F;s或B&#x2F;s(字节每秒）,记为Thr。</p><h3 id="1-5-计算机网络体系结构"><a href="#1-5-计算机网络体系结构" class="headerlink" title="1.5 计算机网络体系结构"></a>1.5 计算机网络体系结构</h3><p>一、计算机网络分层体系结构<br>计算机网络体系结构：计算机网络所划分的层次以及各层协议的集合。</p><p>二、OSI参考模型</p><ol><li><p>OSI参考模型</p><blockquote><p>①物理层。物理层的主要功能是在传输介质上实现无结构比特流传输。物理层的另一项主要任务是规定数据终端设备（DTE)与数据通信设备(DCE)之间接口的相关特性，主要包括机械、电子、功能和规程4个方面的特性。<br>②数据链路层。数据链路层的主要功能是实现在相邻结点之间数据可靠而有效的传输。数据链路层还可以实现相邻结点间通信的流量控制。<br>③网络层。网络层解决的核心问题是如何将分组通过交换网络传送至目的主机，因此，网络层的主要功能是数据转发与路由。<br>④传输层。传输层的功能主要包括复用&#x2F;分解（区分发送和接收主机上的进程）、端到端的可靠数据传输、连接控制、流量控制和拥塞控制机制等。<br>⑤会话层。会话层的主要功能是在建立会话时核实双方身份是否有权参加会话；确定双方支付通信费用；双方在各种选择功能方面取得一致；在会话建立以后，需要对进程间的对话进行管理与控制。<br>⑥表示层。表示层主要用于处理应用实体间交换数据的语法，其目的是解决格式和数据表示的差别，从而为应用层提供一个一致的数据格式，使字符、格式等有差异的设备之间相互通信。除此之外，表示层还可以实现文本压缩&#x2F;解压缩、数据加密&#x2F;解密、字符编码的转换等功能。<br>⑦应用层。应用层为用户提供了一个使用网络应用的“接口”。</p></blockquote></li><li><p>OSI参考模型有关术语<br>  ①在层的实体之间传送的比特组称为数据单元。<br>  ②相邻层间的服务是通过其接口面上的服务访问点（SAP)进行的，N层SAP就是（N+1)层可以访问N层的地方。<br>  ③第N层向（N+1)层提供服务，或第（N+1)层请求N层提供服务，都是用一组原语描述的。<br>  OSI参考模型的原语有4类：请求，指示，响应，证实。<br>  ④在分层的体系结构中，下层向上层提供服务通常有两种形式：面向连接的服务和无连接的服务。</p></li></ol><p>   三、TCP&#x2F;IP参考模型<br>   TCP&#x2F;IP参考模型分为四个层次，从上到下为：应用层、传输层、网络互联层、网络接口层。其中应用层与OSI应用层相对应，传输层与OSI传输层相对应，网络互联层与OSI网络层相对应，网络接口层与OSI数据链路层及物理层相对应。在TCP&#x2F;IP参考模型中，对OSI表示层、会话层没有对应的协议。</p><h3 id="1-6-计算机网络与因特网发展简史"><a href="#1-6-计算机网络与因特网发展简史" class="headerlink" title="1.6 计算机网络与因特网发展简史"></a>1.6 计算机网络与因特网发展简史</h3><p>(1)ARPAnet是第一个分组交换计算机网络，也是当今因特网的祖先。<br>(2)1972年，ARPAnet开发了第一个主机到主机的协议，网络控制协议(NCP)。RayTomlinson为ARPAnet编写了第一个电子邮件程序。<br>(3)20世纪70年代早期与中期，除了ARPAnet之外，还陆续诞生了许多其他分组交换网络，例如ALOHAnet、Telenet等。NormanAbramson在研制分组无线电网络ALOHAnet时，设计了第一个多路访问控制协议ALOHA。Met-calfe与Boggs研制了基于有线共享广播链路的以太网，奠定了当今局域网技术的基础。到20世纪70年代末期，ARPAnet已连接大约200台主机，公共因特网已现雏形。<br>(4)到20世纪80年代，公共因特网上连接的主机数量达到100000台。1986年，创建了NSFNET。在此期间，TCP&#x2F;IP协议簇逐渐成熟，并于1983年1月1日正式部署，替代了NCP。<br>(5)20世纪90年代，万维网应用诞生。<br>(6)从2000年开始，因特网进入爆发式发展时期。</p><h2 id="第二章-网络应用"><a href="#第二章-网络应用" class="headerlink" title="第二章 网络应用"></a>第二章 网络应用</h2><h3 id="2-1-网络应用体系结构"><a href="#2-1-网络应用体系结构" class="headerlink" title="2.1 网络应用体系结构"></a>2.1 网络应用体系结构</h3><p>1、网络应用体系结构与分类。</p><p>计算机网络应用是运行在计算机网络环境下的分布式软件系统，计算机网络应用从体系结构角度可以分为客户&#x2F;服务器（C&#x2F;S)结构、纯P2P(PeertoPeer)结构和混合结构3种类型。</p><p>2、C&#x2F;S网络应用、P2P网络应用以反混合网络应用的特点、区别与联系。</p><h3 id="2-2-网络应用通信基本原理"><a href="#2-2-网络应用通信基本原理" class="headerlink" title="2.2 网络应用通信基本原理"></a>2.2 网络应用通信基本原理</h3><p>(1)网络应用的基本通信方式是C&#x2F;S通信。<br>(2)套接字（Socket)是典型的网络应用编程接口。</p><h3 id="2-3-域名系统（DNS）"><a href="#2-3-域名系统（DNS）" class="headerlink" title="2.3 域名系统（DNS）"></a>2.3 域名系统（DNS）</h3><p>一、层次化域名空间<br>(1)国家顶级域名nTLD：如cn表示中国，us表示美国，uk表示英国等。<br>(2)通用顶级域名gTLD：最早的顶级域名是com(公司和企业）、net(网络服务机构）、org(非盈利性组织）、edu(专用的教育机构）、gov(专用的政府部门）、mil(专用的军事部门）、int(国际组织）。<br>(3)基础结构域名：这种顶级域名只有一个，即arpa，用于反向域名解析，因此又称为反向域名。<br>二、域名服务器<br>域名服务器根据其主要保存的域名信息以及在域名解析过程中的作用等，可以分为根域名服务器、顶级域名服务器、权威域名服务器，中间域名服务器4类。<br>三、域名解析过程<br>域名解析分为递归解析和迭代解析。提供递归查询服务的域名服务器，可以代替查询主机或其他域名服务器，进行进一步的域名查询，并将最终解析结果发送给查询主机或服务器；提供迭代查询的服务器，不会代替查询主机或其他域名服务器，进行进一步的查询，只是将下一步要查询的服务器告知查询主机或服务器。</p><h3 id="2-4-万维网应用"><a href="#2-4-万维网应用" class="headerlink" title="2.4 万维网应用"></a>2.4 万维网应用</h3><p>一、万维网应用结构<br>1.Web应用<br>Web应用是典型的客户&#x2F;服务器网络应用，客户与服务器之间的交互基于应用层协议HTTP。Web应用主要包括Web服务器、浏览器与超文本传输协议（HTTP)等部分。<br>(1)浏览器就是Web应用的客户端软件，即Web应用的客户代理，运行在用户计算机上。<br>(2)Web服务器是Web应用的服务器软件，存储并管理供用户请求浏览的Web页面或称为Web文档。浏览器向Web服务器发送HTTP请求报文，服务器向浏览器送回HTTP响应报文，其中包含客户所要的Web页，浏览器对其中的Web页进行解析并显示。<br>2.URL<br>每个URL地址主要由两部分组成：存放对象的服务器主机域名和对象的路径名。</p><p>二、HTTP<br>(1)HTTP是Web应用的应用层协议，定义浏览器如何向Web服务器发送请求以及Web服务器如何向浏览器进行响应。<br>(2)HTTP报文由4部分组成：起始行、首部行、空白行和实体主体。</p><p>三、Cookie</p><blockquote><p>(1)Cookie中文名称为小型文本文件，指某些网站为了辨别用户身份、进行会话跟踪而存储在用户本地终端上的数据。<br>(2)Cookie文件可以保存在客户端计算机的硬盘中，也可以保存在客户端计算机的内存中。保存在硬盘中的Cookie通常被称为永久Cookie，Cookie的有效周期可以进行设置，关闭浏览器不影响Cookie的有效周期。保存在内存中的Cookie被称为会话Cookie，表示这个Cookie的有效周期是浏览器的会话期间，只要关闭浏览器窗口，Cookie就消失。<br>(3)Web网站利用Cookie技术进行用户跟踪，最常见的用途包括以下几点：<br>①网站可以利用Cookie的ID来准确统计网站的实际访问人数、新访问者和重复访问者的人数对比、访问者的访问频率等数据。<br>②网站可以利用Cookie限制某些特定用户的访问。<br>③网站可以存储用户访问过程中的操作习惯和偏好，对不同的用户呈现不同的显示内容、颜色、布局等界面元素，有针对性地为用户提供服务，提升用户体验感。<br>④记录用户登录网站使用的用户名、密码等信息，当用户多次登录时，无须每次都从键盘输入这些烦琐的字符和数字。<br>⑤电子商务网站利用Cookie可以实现“购物车”功能。对于同一个ID的用户，网站可以跟踪其向“购物车”中添加的不同商品，每个商品都会和ID一起存储在网站数据库中。当用户选择结账时，网站通过对数据库中该ID的检索，找到用户购买的所有商品，一起实现结账功能。</p></blockquote><h3 id="2-5-Internet电子邮件"><a href="#2-5-Internet电子邮件" class="headerlink" title="2.5 Internet电子邮件"></a>2.5 Internet电子邮件</h3><p>一、电子邮件系统结构<br>电子邮件系统主要包括邮件服务器、简单邮件传输协议（SMTP)、用户代理和邮件读取协议等。</p><p>二、SMTP<br><code>端口：TCP 25</code><br>SMTP是Internet电子邮件中核心应用层协议，实现邮件服务器之间或用户代理到邮件服务器之间的邮件传输。</p><p>三、电子邮件格式与MIME<br>(1)一份邮件包括首部、空白行和主体3部分。<br>(2)MIME主要包括以下内容。<br>①5个MIME邮件首部字段，可包含在邮件首部中。<br>②定义了多种邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。<br>③定义了邮件传送编码，可对任何内容格式进行转换，从而适合通过SMTP进行传送。</p><p>四、邮件读取协议<br>1.POP3(邮件读取协议)<br><code>端口：TCP 110</code><br>POP3协议与POP3服务器进行交互，实现对邮箱的操作。POP3协议交互过程可以分为3个阶段：授权（Authorization)、事务处理和更新。在授权阶段，用户代理需要向服务器发送用户名和口令（以明文形式，即非加密），服务器鉴别用户身份，授权用户访问邮箱。在事务处理阶段，用户代理向服务器发送POP3命令，实现邮件读取、为邮件做删除标记、取消邮件删除标记以及获取邮件的统计信息等操作。在更新阶段，客户发出了quit命令，结束POP3会话，服务器删除那些被标记为删除的邮件。</p><p>2.IMAP<br><code>端口：TCP 143</code><br>通过IMAP，收件人可以在服务器上创建新的文件夹，并可以对邮件进行移动、查询、阅读、删除等操作。</p><p>3.HTTP<br><code>端口：80</code><br>当使用基于Web的邮件时，HTTP便被用于邮件的读取，此时HTTP也作为邮件读取协议使用。</p><h3 id="2-6-FTP"><a href="#2-6-FTP" class="headerlink" title="2.6 FTP"></a>2.6 FTP</h3><p><code>端口：TCP 21(控制端口号) 和 TCP 20(数据传输端口号)</code><br>文件传送协议（FTP)是在互联网的两个主机间实现文件互传的网络应用，其应用层协议也称为FTP。FTP可以减少或消除在不同操作系统下处理文件的不兼容性，屏蔽各计算机系统的细节，适合在网络中任意异构计算机之间传送文件。</p><h3 id="2-7-P2P应用"><a href="#2-7-P2P应用" class="headerlink" title="2.7 P2P应用"></a>2.7 P2P应用</h3><p>P2P体系结构的网络应用对服务器依赖很小，甚至对于纯P2P来说，整个应用几乎不依赖某个集中服务器，应用都是动态地在对等方之间进行。</p><h3 id="2-8-Socket编程技术"><a href="#2-8-Socket编程技术" class="headerlink" title="2.8 Socket编程技术"></a>2.8 Socket编程技术</h3><p>网络应用进程可以创建3种类型的Socket：数据报类型套接字SOCK_DGRAM、流式套接字SOCK_STREAM和原始套接字SOCK_RAW。其中，SOCK_DGRAM面向传输层UDP接口，SOCK_STREAM面向传输层TCP接口，SOCK_RAW面向网络层协议接口。</p><h2 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h2><h3 id="3-1-传输层基本服务"><a href="#3-1-传输层基本服务" class="headerlink" title="3.1 传输层基本服务"></a>3.1 传输层基本服务</h3><p>1、传输层的功能<br>(1)传输层的核心任务是为应用进程之间提供端到端的逻辑通信服务。<br>(2)传输层主要实现如下功能：<br>①传输层寻址；<br>②对应用层报文进行分段和重组；<br>③对报文进行差错检测；<br>④实现进程间的端到端可靠数据传输控制；<br>⑤面向应用层实现复用与分解；<br>⑥实现端到端的流量控制；<br>⑦拥塞控制。</p><p>2、传输层寻址与端口<br>(1) <code>0~1023的端口号为熟知端口号。</code><br>(2)<code>1024~49151的端口号为登记端口号</code>，为没有熟知端口号的应用程序(服务器）使用，必须在互联网数字分配结构（IANA)登记，以防止重复。<br>(3)<code>49152~65535为客户端口号或短暂端口号</code>，留给客户进程或用户开发的非标准服务器暂时使用。另外，端口号只本地有效，只是标识了本计算机应用层中的各应用进程在与传输层交互时的层间接口。</p><p>3、无连接服务与面向连接服务<br>传输层提供的服务可以分为无连接服务和面向连接服务两大类。</p><h3 id="3-2-传输层的复用与分解"><a href="#3-2-传输层的复用与分解" class="headerlink" title="3.2 传输层的复用与分解"></a>3.2 传输层的复用与分解</h3><p>(1)传输层协议的重要基本功能：复用与分解。<br>(2)UDP依据二元组&lt;目的IP地址，目的端口号&gt;来唯一标识一个UDP套接字；TCP依据四元组&lt;源IP地址，源端口号，目的IP地址，目的端口号&gt;来唯一标识一个TCP套接字，即标识一条TCP连接。</p><h3 id="3-3-停-等协议与滑动窗口协议"><a href="#3-3-停-等协议与滑动窗口协议" class="headerlink" title="3.3 停-等协议与滑动窗口协议"></a>3.3 停-等协议与滑动窗口协议</h3><p>(1)停-等协议的基本工作过程是：发送方发送经过差错编码和编号的报文段，等待接收方的确认；接收方如果正确接收报文段，即差错检测无误且序号正确，则接收报文段，并向发送方发送ACK,否则丢弃报文段，并向发送方发送NAK；发送方如果收到ACK，则继续发送后续报文段，否则重发刚刚发送的报文段。<br>(2)GBN协议的发送端缓存能力较高，可以在未得到确认前连续发送多个分组，因此，GBN协议的发送窗口Ws≥1。GBN接收端缓存能力很低，只能接收1个按序到达的分组，不能缓存未按序到达的分组，通常称GBN协议的接收端无缓存能力。因此，GBN协议的接收窗口Wr&#x3D;1。<br>(3)SR协议是通过让发送方仅重传那些未被接收方确认（出错或丢失）的分组，而避免了不必要的重传。为此，SR协议的接收方是对每个正确接收的分组进行逐个确认。</p><h3 id="3-4-用户数据报协议（UDP）"><a href="#3-4-用户数据报协议（UDP）" class="headerlink" title="3.4 用户数据报协议（UDP）"></a>3.4 用户数据报协议（UDP）</h3><p>(1)用户数据报协议UDP是Internet传输层协议，提供无连接、不可靠、数据报尽力传输服务。<br>(2)参与UDP校验和计算的内容包括3部分：UDP伪首部、UDP首部和应用层数据。</p><h3 id="3-5-传输控制协议（TCP）"><a href="#3-5-传输控制协议（TCP）" class="headerlink" title="3.5 传输控制协议（TCP）"></a>3.5 传输控制协议（TCP）</h3><p>(1)传输控制协议（TCP)是Internet一个重要的传输层协议。TCP提供面向连接、可靠、有序、字节流传输服务。<br>(2)TCP报文段由首部字段和一个数据字段组成。<br>(3)TCP连接管理包括连接建立与连接拆除。TCP连接建立通过“三次握手”过程。<br>(4)TCP的可靠数据传输实现机制包括差错编码、确认、序号、重传、计时器等。TCP的可靠数据传输是基于滑动窗口协议。</p><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h3 id="4-1-网络层服务"><a href="#4-1-网络层服务" class="headerlink" title="4.1 网络层服务"></a>4.1 网络层服务</h3><p>1、网络层需要实现两项重要功能：</p><p>① 转发（forwarding）：当通过一条输入链路接收到一个分组后， 路由器需要决策通过哪条输出链路讲分组发送出去，并讲分组从输入接口转移到输出接口。</p><p>② 路由选择（routing）：当一个分组到达路由器时，路由器会以该分组的网络层首部地址字段的值（比如目的IP地址）作为键，去转发表中查询相应的表项，从而获知该分组应转发到哪条链路上。</p><h3 id="4-2-数据报网络与虚电路网络"><a href="#4-2-数据报网络与虚电路网络" class="headerlink" title="4.2 数据报网络与虚电路网络"></a>4.2 数据报网络与虚电路网络</h3><p>1、虚电路网络特点;</p><p>虚电路网络在网络层提供面向连接的分组交换服务</p><p>① 建立一条网络层逻辑连接</p><p>② 不需要为每条虚电路分配独享资源（区别与电路交换）</p><p>③ 根据虚电路号沿虚电路路径按序发送分组</p><p>2、数据报网络特点：</p><p>① 无连接</p><p>② 每个分组作为一个独立的数据报进行传送，路径也可能不同</p><p>③ 分组可能出现乱序和丢失</p><h3 id="4-3-网络互连与网络互连设备"><a href="#4-3-网络互连与网络互连设备" class="headerlink" title="4.3 网络互连与网络互连设备"></a>4.3 网络互连与网络互连设备</h3><p>1、异构网络：</p><p>两个网络的通信技术和运行的协议不同</p><p>异构网络互联的基本策略：</p><p>① 协议转换</p><p>② 构建虚拟互联网络<br><img src="http://image.oldit.cn/article/5dfdc113ccc7469c836b811e0251d468.webp" alt="在这里插入图片描述"></p><p>2、路由器：</p><p><img src="http://image.oldit.cn/article/f1ea909650a948ad812ca9ea5cbf1216.webp"><br>3、路由器交换结构：<br><img src="http://image.oldit.cn/article/383165223482456a973566410b0c5176.webp"></p><p>4、路由处理器：</p><p>执行路由器的各种指令，包括路由协议的运行、路由计算以及路由表的更新维护等。</p><h3 id="4-4-网络层拥塞控制"><a href="#4-4-网络层拥塞控制" class="headerlink" title="4.4 网络层拥塞控制"></a>4.4 网络层拥塞控制</h3><p>1、拥塞：</p><p>一种持续过载的网络状态，此时用户对网络资源（包括链路带宽、存储空间和处理器处理能力等）的总需求超过了网络固有的容量。</p><p>原因：</p><blockquote><ol><li>缓冲区容量有限</li><li>传输线路的带宽有限</li><li>网络结点的处理能力有限</li><li>网络中某些部分发生了故障</li></ol></blockquote><p>2、流量感知路由：</p><p>根据网络负载动态调整，将网络流量引导到不同的链路上，均衡网络负载，从而延缓或避免拥塞发生。</p><p>解决网络负载的震荡现象：</p><blockquote><ol><li>多路径路由</li><li>缓慢转移流量至另一链路</li></ol></blockquote><p>3、准入控制：</p><p>是一种广泛应用于虚电路网络的拥塞预防技术。</p><p>基本思想：</p><blockquote><p>对新建虚电路进行审核，如果新建立的虚电路会导致网络变得拥塞，那么网络拒绝建立该新虚电路。</p><p>拥塞状况的量化：基于平均流量和瞬时流量。</p></blockquote><p>4、流量调节：</p><p>① 感知拥塞</p><p>② 处理拥塞：将拥塞信息通知到其他上游节点。</p><blockquote><p>处理方法：</p><ol><li>抑制分组：给拥塞数据报的源主机返回一个抑制分组</li><li>背压：让抑制分组在从拥塞结点到源结点的路径上的每一跳，都发挥抑制作用</li></ol></blockquote><p>5、负载脱落</p><p>路由器主动丢弃某些数据报</p><blockquote><p>如何选择要丢弃的数据报：</p><ol><li>丢弃新分组：如GBN</li><li>丢弃老分组：如实时视频流</li></ol></blockquote><h3 id="4-5-Internet网络层"><a href="#4-5-Internet网络层" class="headerlink" title="4.5 Internet网络层"></a>4.5 Internet网络层</h3><p>1、IPv4协议：</p><p>IP数据报格式：</p><p><img src="http://image.oldit.cn/article/a30988741ac142a09a5cd5572a5f96d3.webp"></p><p>IP数据报分片：</p><blockquote><p>标识：判断这些分片是否属于同一个IP数据报</p><p>标志：判断是否为最后一个分片</p><p>片偏移：判断各分片的先后顺序 </p></blockquote><p><img src="http://image.oldit.cn/article/1278d6c9d42d4112a80d441866a778bd.webp" alt="在这里插入图片描述"></p><p>2、IPv4编址：</p><p>IPv4地址长度：32位二进制</p><p>分类地址：</p><p><img src="http://image.oldit.cn/article/2b8863ea92214c2e975255afb8688f51.webp"></p><p>子网划分：</p><blockquote><p>将一个较大的子网划分为多个较小子网的过程。</p><p>较大子网具有较短的网络前缀，较小子网具有稍长的前缀。</p></blockquote><p><code>个人的计算方法，使用的是块计算，仅凭自己理解。</code><br><img src="http://image.oldit.cn/article/f12652bee07d48738d5c3b8242bf7a39.webp" alt="在这里插入图片描述"></p><p>超网：</p><blockquote><p>将具有较长前缀的相对较小的子网合并为一个具有稍短前缀的相对较大的子网。</p></blockquote><p>子网掩码：</p><blockquote><p>用来定义一个子网的网络前缀长度</p></blockquote><p>分组转发：</p><blockquote><p>查找路由转发表</p><p>最长前缀匹配</p></blockquote><p><img src="http://image.oldit.cn/article/c30d5c318420475c8b65e58b2331d5b2.webp"></p><p>路由聚合：将相同路由的连续子网合并</p><p>3、动态主机配置协议</p><p>DHCP：为网络内的主机提供动态IP地址分配服务。</p><p><img src="http://image.oldit.cn/article/4ac24bdee783483c875ebcf57f471bd5.webp"></p><p>4、网络地址转换：</p><p>网络地址转换NAT——使用私有地址访问互联网</p><blockquote><ol><li>从内网进入互联网的IP数据报：将其源IP地址替换为NAT服务器拥有的合法公共IP地址，同时替换端口号，并将替换关系记录到NAT转换表中；</li><li>从互联网返回的IP数据报：依据其目的IP地址与目的端口号检索NAT转换表，得到内部私有IP地址与端口号，替换目的IP地址和目的端口号，然后将IP数据报转发到内部网络。</li></ol></blockquote><p>5、ICMP</p><p>互联网控制报文协议（ICMP）：</p><p>在主机或路由器间，实现差错信息报告。</p><p>ICMP差错报告报文共有5种：终点不可达、源点抑制、时间超时、参数问题和路由重定向等。</p><p>ICMP询问报文：回声（echo）请求&#x2F;应答、时间戳（timestamp）请求&#x2F;应答</p><p>6、IPv6</p><p>① 解决IPv4地址耗尽的问题</p><p>② IPv6报文首部长度固定40字节</p><p>③ IPv6地址长度128位</p><p>④ IPv4到IPv6的迁移：双栈协议、隧道</p><h3 id="4-6-路由算法与路由协议"><a href="#4-6-路由算法与路由协议" class="headerlink" title="4.6 路由算法与路由协议"></a>4.6 路由算法与路由协议</h3><p>1、链路状态路由选择算法</p><p><img src="http://image.oldit.cn/article/ed4fc9c2dbee4f4b80ac8ae5c2414eee.webp"></p><p>2、距离向量路由选择算法</p><p>每个结点基于其与邻居结点间的直接链路距离，以及邻居交换过来的距离向量，计算并更新其到达每个目的结点的最短距离，然后将新的距离向量再通告给其所有邻居，直到距离向量不再改变。</p><p><img src="http://image.oldit.cn/article/32de9a4c74fa438c80ca55c40db6bf51.webp"></p><p>3、层次化路由选择</p><p>实现大规模网络路由选择最有效、可行的解决方案。</p><p>划分自治系统：</p><p>网络路由器</p><p>自治系统间路由协议</p><p><img src="http://image.oldit.cn/article/a7fe8548eafe40eaaddbc8e6ce2e2a8c.webp"></p><p>4、Internet路由选择协议</p><p>① 内部网关协议（IGP）：</p><blockquote><ol><li>RIP：基于距离向量路由选择算法，跳数作为距离度量，最大距离不超过15跳，每30秒交换一个距离向量。</li><li>OSPF：基于链路状态路由选择算法</li></ol></blockquote><p>② 外部网关协议EGP：</p><p>BGP——用于大型网络</p><h2 id="第五章-数据链路层与局域网"><a href="#第五章-数据链路层与局域网" class="headerlink" title="第五章 数据链路层与局域网"></a>第五章 数据链路层与局域网</h2><h3 id="5-1-数据链路层服务"><a href="#5-1-数据链路层服务" class="headerlink" title="5.1 数据链路层服务"></a>5.1 数据链路层服务</h3><p>链路：通信链路连接的相邻结点的通信信道。</p><p>链路层数据单元：帧</p><p><img src="http://image.oldit.cn/article/9dd99c224ff74ace843718ed45c56c6c.webp"><br>主要功能包括：</p><p>① 组帧</p><p>② 链路接入：点对点链路、广播链路</p><p>③ 可靠交付（可靠传输方法多用于高出错率链路）</p><p>④ 差错控制</p><h3 id="5-2-差错控制"><a href="#5-2-差错控制" class="headerlink" title="5.2 差错控制"></a>5.2 差错控制</h3><p>1、差错控制的基本方式：</p><p>① 检错重发</p><p>② 前向纠错：接收端进行差错纠正</p><p>③ 反馈校验：接收端将收到的数据原封不动发回发送端</p><p>④ 检错丢弃</p><p>2、差错编码的基本原理：</p><p>香农信道编码定理：理论上可以通过编码使得数据传输过程不发生错误，或者将错误概率控制在很小的数值之下。</p><p><img src="http://image.oldit.cn/article/9f97085432cb402790f24c00837493e4.webp"></p><p>3、差错编码的检错与纠错能力：</p><p>直接上图：</p><p><img src="http://image.oldit.cn/article/bd7b772ca83b43a287926221f08cf3d9.webp"></p><p><img src="http://image.oldit.cn/article/10869fcc0aab4a669f7346062273ed68.webp"></p><p>4、典型的差错编码：</p><p>① 奇偶校验码：</p><blockquote><p>奇校验：编码后的码字中 “1” 的个数为奇数</p><p>偶校验：编码后的码字中 “1” 的个数为偶数</p></blockquote><p>② 汉明码：可以实现单个比特差错纠正</p><p>③ 循环冗余码CRC-（重点难点）：检错能力强，编码效率高，实现简单。</p><h3 id="5-3-多路访问控制协议"><a href="#5-3-多路访问控制协议" class="headerlink" title="5.3 多路访问控制协议"></a>5.3 多路访问控制协议</h3><p>识记:<br>数据链路的分类;<br>MAC协议的作用;<br>MAC协议的分类。<br>领会:<br>多路复用技术;<br>信道划分协议TDMA、FDMA、WDMA;<br>随机访问协议ALOHA协议、时隙ALOHA协议、CSMA;受控接入MAC协议。<br>应用:<br>CDMA基本原理;<br>CSMA&#x2F;CD特点以及最小帧长与结点间距离的约束关系。</p><p>1、信道划分MAC协议：</p><p>多路访问控制MAC：广播信道上用于协调各个结点的数据发送</p><p>信道划分MAC协议 :</p><blockquote><ol><li>频分多路复用: 在频域内将信道带宽划分为多个子信道</li><li>时分多路复用: 将通信信道的传输信号在时域内划分为多个等长的时隙。</li><li>波分多路复用：在一根光中，传输多路不同波长的光信号</li><li>码分多路复用：从编码域进行划分，使得编码后的信号在同一信道中混合传输。</li></ol></blockquote><p>2、随机访问的MAC协议：</p><blockquote><ol><li>ALOHA协议</li></ol><p>纯ALOHA : 直接发送 –&gt; 信道侦听 –&gt; 冲突重发</p><p>时隙ALOHA : 时隙开始时发送–&gt;信道侦听–&gt;冲突则下一时隙以概率P重发</p><ol start="2"><li><p>载波监听多路访问协议CSMA</p><p> 发送前监听信道是否空闲</p></li></ol><p>(1) 非坚持CSMA : 忙则等待随机时间后再侦听<br>(2) 1-坚持CSMA : 忙则持续侦听<br>(3) P-坚持CSMA : 闲则概率P在最近时隙发送</p><ol start="3"><li>带冲突检测的载波监听多路访问协议CSMA&#x2F;CD监听空闲后发送，发送时检测碰撞碰撞后等待重发</li></ol></blockquote><p>3、受控接入MAC协议：</p><blockquote><ol><li>集中式控制由一个主机负责调度其他通信站接入信道，从而避免冲突</li></ol><p>主要方法: 轮询技术，又分为轮叫轮询和传递轮询</p><ol start="2"><li>分散式控制典型方法: 令牌技术，如令牌环网</li></ol></blockquote><h3 id="5-4-局域网"><a href="#5-4-局域网" class="headerlink" title="5.4 局域网"></a>5.4 局域网</h3><p>局域网特点：覆盖面积较小，网络传输速率高，传输误码率低</p><p>1、数据链路层寻址与ARP<br>① MAC地址：每个接口对应一个MAC地址，且全球唯一；长度48位（其中前24位为厂商标识，剩下24位由厂商分配）</p><p>② 地址解析协议：根据本网内目的主机或默认网关的IP地址获取其MAC地址；查询&#x2F;响应</p><p>2、以太网——IEEE 802.3标准 ——采用CSMA&#x2F;CD访问控制方法</p><p> <img src="http://image.oldit.cn/article/b3e2f3d2ad6d4e5aafd2ab03c5fcc391.webp" alt="在这里插入图片描述"></p><p>3、交换机：</p><p>① 转发与过滤：可以依据接收到的链路层帧的目的MAC地址，选择性地转发到相应的端口。</p><p>以目的MAC地址为主键，查找交换表</p><p>② 自学习：交换机通过自学习构建交换表</p><p>③ 优点：消除冲突，提高性能；支持异质链路；易于进行网络管理。</p><p>4、虚拟局域网：VLAN</p><p>① 一种基于交换机（支持VLAN功能）的逻辑分割广播域的局域网应用形式。</p><p>② 不受物理位置的限制，以软件的方式划分和管理局域网中的工作组。</p><p>③ 能够抑制广播风暴。</p><p>④ 划分方法：基于交换机端口；基于MAC地址；基于上层协议类型或地址</p><h3 id="5-5-点对点链路协议"><a href="#5-5-点对点链路协议" class="headerlink" title="5.5 点对点链路协议"></a>5.5 点对点链路协议</h3><p>1、PPP</p><p>点对点协议——PPP</p><p>能够处理差错检测、支持多种上层协议、允许连接时协商IP地址、允许身份认证</p><p>典型应用：拨号上网</p><p>功能：成帧；链路控制协议LCP；网络控制协议NCP</p><p>2、HDLC协议</p><p>高级数据链路控制——HDLC协议</p><p>可应用点对点链路和点对多点链路</p><p>帧定界：<code>帧的定界符是 01111110</code></p><p><img src="http://image.oldit.cn/article/b5604fbfc3ab42a2a3a3b7641f373028.webp"></p><p>位填充：</p><blockquote><p>发送端：只要发现数据字段5各连续1，就立即插入一个0，保证数据字段不会出现连续的6个1；</p><p>接收端：发现数据流中5个连续的1，就删除其后的0，还原成原来的信息</p></blockquote><p><img src="http://image.oldit.cn/article/0ddc77d52a8e4bc9804f5a1b736e6ab7.webp"></p><h2 id="第六章-物理层"><a href="#第六章-物理层" class="headerlink" title="第六章 物理层"></a>第六章 物理层</h2><h3 id="6-1-数据通信基础"><a href="#6-1-数据通信基础" class="headerlink" title="6.1 数据通信基础"></a>6.1 数据通信基础</h3><p>1、数据通信基础</p><blockquote><p>1.消息:人类能够感知的描述称为消息<br>2.信息:信息是对事物状态或存在方式的不确定性表述信息是可以度量的<br>3.通信:本质就是在一点精确或近似地再生另一点的信息</p><p>4.通信系统:能够实现通信功能的各种技术、设备和方法的总体。<br>5.信号: 通信系统中，在传输通道中传播的信息的载体</p><p>6.数据 : 对客观事物的性质状态以及相互关系等进行记6载的符号及其组合<br>7.信道: 信道是以传输介质为基础的信号通道</p></blockquote><p>2、数据通信系统模型</p><p>① 通信系统的构成：信源、发送设备、信道、接收设备、信宿和噪声源等部</p><p><img src="http://image.oldit.cn/article/84844eab3f25432bba11b685d461be5d.webp"></p><p>② 模拟通信<br>模拟信号:信号的因变量是连续的</p><p>③ 数字通信<br>数字信号: 因变量是离散的。</p><p><img src="http://image.oldit.cn/article/e60625af94724b5ebb1a55ca49b1c722.webp"></p><p>④ 数据通信方式</p><blockquote><p>(1)单向通信、双向交替通信和双向同时通信 ;（即：单工、半双工、全双工）</p><p>(2)并行通信和串行通信 ;<br>(3)异步通信和同步通信。</p></blockquote><p>‍</p><p>⑤数据通信系统的功能</p><blockquote><p>(1)信道利用 ;<br>(2)接口及信号产生</p><p>(3)同步</p><p>(4)差错检测与纠正;</p><p>(5)寻址与路由;</p><p>(6)网络管理 ;</p><p>(7) 安全保证</p></blockquote><h3 id="6-2-物理介质"><a href="#6-2-物理介质" class="headerlink" title="6.2 物理介质"></a>6.2 物理介质</h3><p>1、导引型传输介质</p><p>① 架空明线：架空明线是指平行且相互分离或绝缘的架空裸线线路通常采用铜线或铝线等金属导线</p><p>② 双绞线：两根相互绝缘的铜线并排绞合在一起，减少对相邻导线的电磁干扰</p><p><img src="http://image.oldit.cn/article/2457c30ee89241c693cd078f0f6ae731.webp"></p><p>③ 同轴电缆：抗电磁干扰性能好；现在主要用于频带传输，如有线电视</p><p>④ 光纤：基本原理是利用光的全反射通信容量大、距离远、抗电磁干扰性能好，保密性好；多模光纤和单模光纤</p><p>2、非导引型传输介质</p><p>① 地波传播：低频信号，沿地球表面传播<br>② 天波传播：较高频信号，利用电离层的反射传播<br>③ 视线传播：高频信号，点对点直线传播，中继传输</p><h3 id="6-3-信道与信道容量"><a href="#6-3-信道与信道容量" class="headerlink" title="6.3 信道与信道容量"></a>6.3 信道与信道容量</h3><p>1、信道分类与模型</p><p>狭义信道: 信号传输介质</p><p>广义信道: 信号传输介质和通信系统的一些变换装置</p><p>① 调制信道:信号从调制器的输出端传输到解调器的输入端经过的部分。<br>② 编码信道:数字信号由编码器输出端传输到译码器输入端经过的部分。</p><p><img src="http://image.oldit.cn/article/d31b069b48d2412fa288dd75ab5577ee.webp"></p><p>2、信道传输特性</p><p>① 恒参信道: 各种有线信道和部分无线信道，传输特性变化小、缓慢，如微波视线传播链路和卫星链路等。</p><blockquote><p>(1)对信号幅值产生固定的衰减;<br>(2)对信号输出产生固定的时延</p></blockquote><p>② 随参信道:传输特性随时间随机快速变化</p><blockquote><p>(1)信号的传输衰减随时间随机变化</p><p>(2)信号的传输时延随时间随机变化<br>(3)存在多径传播现象</p></blockquote><p>3、信道容量</p><p><img src="http://image.oldit.cn/article/cd5f367c123742349d96c4fbd2927d0c.webp"><br><img src="https://img-blog.csdnimg.cn/22ad03e073ed4af9ad6762efe9ca0f0a.png" alt="在这里插入图片描述"></p><h3 id="6-4-基带传输"><a href="#6-4-基带传输" class="headerlink" title="6.4 基带传输"></a>6.4 基带传输</h3><p>1、基带传输基本概念</p><p>模拟基带信号:模拟信源发出的原始电信号</p><p>数字基带信号: 数字信源发出的基带信号。</p><pre><code>模拟基带信号可以通过信源编码转换为数字基带信号</code></pre><p>带传输: 直接在信道中传送基带信号数字基带传输系统</p><p><img src="http://image.oldit.cn/article/a7e9d9cb68e24697b6c183703de87bc3.webp"></p><p>2、数字基带传输编码</p><p><img src="http://image.oldit.cn/article/2ffc90bf485042729c4a61bd219caaa7.webp"><br><img src="http://image.oldit.cn/article/27c3315567754a03ad84c2fbcf889d0d.webp" alt="在这里插入图片描述"><br><img src="http://image.oldit.cn/article/8c320872585849aeabbbd4a1b4668074.webp" alt="在这里插入图片描述"><br><img src="http://image.oldit.cn/article/ab955e26ee004647a02985c68ec9c643.webp" alt="在这里插入图片描述"></p><p>例题：</p><p><img src="http://image.oldit.cn/article/36382f269ac34490ba93dea4b85e7d0c.webp"></p><h3 id="6-5-频带传输"><a href="#6-5-频带传输" class="headerlink" title="6.5 频带传输"></a>6.5 频带传输</h3><p>1、频带传输基本概念</p><blockquote><ol><li>数字调制<br> 利用数字基带信号控制载波信号的某些特征参量，使载波信号的这些参量的变化反映数字基带信号的信息，进而将数字基带信号变换为数字通带信号的过程</li><li>键控法<br> 利用两种不同的幅值、频率或相位来分别表示0或1.</li></ol></blockquote><p>2、频带传输中的三种调制方式</p><blockquote><ol><li>二进制数字调制<br> (1)二进制幅移键控<br> (2)二进制频移键控<br> (3)二进制相移键控<br> (4)二进制差分相移键控</li><li>多进制数字调制</li><li>正交幅值调制QAM</li></ol></blockquote><h3 id="6-6-物理层接口规程"><a href="#6-6-物理层接口规程" class="headerlink" title="6.6 物理层接口规程"></a>6.6 物理层接口规程</h3><p>1、物理层接口概述</p><p>物理层接口的四大特性，分别为机械特性、电气特性、功能特性以及规程特性。<br>物理层接口规范定义DTE和DCE之间的接口特性。<br>DTE : 数据终端设备<br>DCE : 数据电路端接设备</p><p>2、物理层接口特性</p><blockquote><ol><li>机械特性<br> 通信实体间硬件连接接口的机械特点.</li><li>电气特性<br> 在物理连接上，导线的电气连接及有关电路的特性</li><li>功能特性<br> 物理接口各条信号线的用途</li><li>规程特性<br> 通信协议，指明利用接口传输比特流的全过程，以及各项用于传输的事件发生的合法顺序</li></ol></blockquote><h2 id="第七章-无线与移动网络"><a href="#第七章-无线与移动网络" class="headerlink" title="第七章 无线与移动网络"></a>第七章 无线与移动网络</h2><h3 id="7-1-无线网络"><a href="#7-1-无线网络" class="headerlink" title="7.1 无线网络"></a>7.1 无线网络</h3><p>1、无线网络基本结构</p><blockquote><p>1.无线主机<br>2.无线链路<br>3.基站<br>4.网络基础设施5.自组织网络( Ad Hoc网络）</p></blockquote><p>2、无线链路与无线网络特性</p><blockquote><p>无线链路与有线链路的主要区别：<br>1.信号强度的衰减<br>3.多径传播<br>2.干扰<br>4.隐藏终端</p></blockquote><h3 id="7-2-移动网络"><a href="#7-2-移动网络" class="headerlink" title="7.2 移动网络"></a>7.2 移动网络</h3><p>1、移动网络基本原理</p><blockquote><p>1.不同的移动性需求</p><p>2.网络层地址保持不变的重要性</p><p>3.有线基础设施的支持</p></blockquote><p>2、寻址</p><p>永久地址和转交地址</p><p>3、移动结点的路由选择</p><p>① 间接路由选择：由归属代理转发数据给外部代理</p><p><img src="http://image.oldit.cn/article/f84839115967480ca32b65749632b77d.webp"></p><p>② 直接路由选择: 由通信代理通过归属代理获得转交地址，直接发送到外部代理</p><p><img src="http://image.oldit.cn/article/1c79cb3960b44e56ad8ad7ccd0e3fe39.webp"></p><h3 id="7-3-无线局域网IEEE802-11（WIFI）"><a href="#7-3-无线局域网IEEE802-11（WIFI）" class="headerlink" title="7.3 无线局域网IEEE802.11（WIFI）"></a>7.3 无线局域网IEEE802.11（WIFI）</h3><p><img src="http://image.oldit.cn/article/5c8c42f9cdf8426da00efb82763d9695.webp"></p><h3 id="7-4-蜂窝网络"><a href="#7-4-蜂窝网络" class="headerlink" title="7.4 蜂窝网络"></a>7.4 蜂窝网络</h3><ol><li>2G网络<br> 信令和语音信道都是数字式的。</li><li>3G网络<br> 无线通信与互联网等多媒体通信结合</li><li>4G网络<br> 高速率数据业务，不同频段、不同业务环境间的无缝漫游</li><li>5G网络<br> 超高容量、超可靠性、随时随地可接入性</li></ol><h3 id="7-5-移动IP网络"><a href="#7-5-移动IP网络" class="headerlink" title="7.5 移动IP网络"></a>7.5 移动IP网络</h3><h3 id="7-6-其他典型无线网络简介"><a href="#7-6-其他典型无线网络简介" class="headerlink" title="7.6 其他典型无线网络简介"></a>7.6 其他典型无线网络简介</h3><ol><li>WiMax<br> IEEE 802.16，城域网技术，传输距离更远，接入带宽更高。</li><li>蓝牙<br> IEEE 802.15.1，小范围，低功率，低成本，自组织。</li><li>ZigBee<br> IEEE 802.15.4，低功率，低数据速率，低工作周期</li></ol><h2 id="第八章-网络安全基础"><a href="#第八章-网络安全基础" class="headerlink" title="第八章 网络安全基础"></a>第八章 网络安全基础</h2><h3 id="8-1-网络安全概述"><a href="#8-1-网络安全概述" class="headerlink" title="8.1 网络安全概述"></a>8.1 网络安全概述</h3><p>1、基本概念</p><p>网络安全通信所需要的基本属性 :</p><blockquote><p>1.机密性;<br>2.消息完整性;</p><p>3.可访问与可用性;</p><p>4.身份认证</p></blockquote><p>2、网络安全威胁</p><blockquote><p>1.窃听;<br>2.插入;<br>3.假冒;<br>4.劫持;<br>5.拒绝服务DoS和分布式拒绝服务DDoS<br>6.映射;<br>7.嗅探;<br>8.IP欺骗</p></blockquote><h3 id="8-2-数据加密"><a href="#8-2-数据加密" class="headerlink" title="8.2 数据加密"></a>8.2 数据加密</h3><p>明文:未加密的消息<br>密文:被加密的消息<br>加密:伪装消息以隐藏消息的过程，即明文转变为密文的过程。<br>解密:密文转变为明文的过程</p><p>1、传统加密方式</p><p>① 替代密码：用密文字母替代明文字母</p><p><img src="http://image.oldit.cn/article/060aadc326b14ee0a5ef33468ee0fb4a.webp" alt=" "></p><p>②换位密码：根据一定的规则重新排列明文</p><p><img src="http://image.oldit.cn/article/741095b66e28465a8261529d37eccb59.webp" alt=" "></p><p>2、对称密钥加密</p><p>现代密码分类对称密钥密码:加密密钥和解密密相同（密钥保密）</p><p>非对称密钥密码 : 加密密钥和解密密钥不同</p><p>对称密钥密码分类:分组密码 : DES，AES、IDEA等</p><p>流密码</p><blockquote><ol><li>DES : 56位密钥，64位分组</li><li>三重DES : 使用两个密钥( 共112位)，执行三次DES算法。</li><li>AES :分组128位，密钥128&#x2F;192&#x2F;256位</li><li>IDEA: 分组64位，密钥128位</li></ol></blockquote><p>3、非对称&#x2F;公开密钥加密</p><p>密钥成对使用，其中一个用于加密，另一个用于解密，且加密密钥可以公开，也称公开密钥加密。</p><p>典型的公钥算法：Diffie-Hellman算法、RSA算法</p><p><img src="http://image.oldit.cn/article/3de9a5bc3bf34e40accb03058ef2ad75.webp" alt=" "></p><h3 id="8-3-消息完整性与数字签名"><a href="#8-3-消息完整性与数字签名" class="headerlink" title="8.3 消息完整性与数字签名"></a>8.3 消息完整性与数字签名</h3><p>1、消息完整性检测方法</p><blockquote><p>密码散列函数</p><ol><li><p>特性:<br> 定长输出；</p><p> 单向性( 无法根据散列值逆推报文 ) ；</p><p> 抗碰撞性( 无法找到具有相同散列值的两个报文 )</p></li><li><p>典型散列函数<br> MD5:128位散列值<br> SHA-1:160位散列值</p></li></ol></blockquote><p>2、报文认证</p><blockquote><p>报文认证是使消息的接收者能够检验收到的消息是否是真实的认证方法。来源真实、未被篡改。</p><p>1.报文摘要(数字指纹)</p><p>2.报文认证方法<br>简单报文验证:仅使用报文摘要，无法验证来源真实性</p><p>报文认证码:使用共享认证密钥，但无法防止接收方算改。</p></blockquote><p>3、数字签名</p><blockquote><p>身份认证、数据完整性、不可否认性</p><p>1.简单数字签名: 直接对报文签名<br>2.签名报文摘要</p></blockquote><p><img src="http://image.oldit.cn/article/49dfbbc5bc97469181bf6c67ade84a11.webp" alt="在这里插入图片描述"></p><h3 id="8-4-身份认证"><a href="#8-4-身份认证" class="headerlink" title="8.4 身份认证"></a>8.4 身份认证</h3><p>口令 : 会被窃听</p><p>加密口令 : 可能遭受回放(重放)攻击</p><p>加密一次性随机数:可能遭受中间人攻击</p><p> <img src="http://image.oldit.cn/article/84427ec9055b43c9b1f05a940b9388e1.webp" alt="在这里插入图片描述"></p><h3 id="8-5-密钥分发中心与证书认证机构"><a href="#8-5-密钥分发中心与证书认证机构" class="headerlink" title="8.5 密钥分发中心与证书认证机构"></a>8.5 密钥分发中心与证书认证机构</h3><h3 id="8-6-防火墙与入侵检测系统"><a href="#8-6-防火墙与入侵检测系统" class="headerlink" title="8.6 防火墙与入侵检测系统"></a>8.6 防火墙与入侵检测系统</h3><p>1、防火墙基本概念</p><p>防火墙：能够隔离组织内部网络与公共互联网，允许某些分组通过，而阻止其他分组进入或离开内部网络的软件、硬件或者软件硬件结合的一种设施。</p><p>前提:从外部到内部和从内部到外部的所有流量都经过防火墙。</p><p>2、防火墙分类</p><blockquote><ol><li><p>无状态分组过滤器<br> 基于特定的规则对分组是通过还是丢弃进行决策使用访问控制列表(ACL)实现防火墙规则</p></li><li><p>有状态分组过滤器</p><p> 跟踪每个TCP连接建立、拆除，根据状态确定是否允许分组通过</p></li><li><p>应用网关<br> 鉴别用户身份或针对授权用户开放特定服务</p></li></ol></blockquote><p>3、入侵检测系统IDS</p><p>入侵检测系统( IDS)是当观察到潜在的恶意流量时能够产生警告的设备或系统</p><h3 id="8-7-网络安全协议"><a href="#8-7-网络安全协议" class="headerlink" title="8.7 网络安全协议"></a>8.7 网络安全协议</h3><p>1、安全电子邮件</p><blockquote><ol><li><p>电子邮件安全需求<br> (1)机密性</p><p> (2)完整性</p><p> (3)身份认证性</p><p> (4)抗抵赖性</p></li><li><p>安全电子邮件标准</p><p> PGP</p></li></ol></blockquote><p>2、安全套接字层SSL</p><p>① SSL是个于应用层和传输层之间的安全协议</p><p>② SSL协议栈</p><p><img src="http://image.oldit.cn/article/44bd85e7069847b89cdd0b24246c6a2c.webp"></p><p>③ SSL握手过程协商密码组，生成密钥，服务器&#x2F;客户认证与鉴别</p><p>3、虚拟专用网VPN和IP安全协议IPsec</p><p>① VPN：建立在公共网络上的安全通道，实现远程用户、分支机构、业务伙伴等与机构总部网络的安全连接，从而构建针对特定组织机构的专用网络</p><p>关键技术: 隧道技术，如IPSec</p><p>② 典型的网络层安全协议-IPSec：提供机密性、身份鉴别、数据完整性验证和防重放攻击服务。<br>体系结构 :认证头AH协议、封装安全载荷ESP协议。</p><p>运行模式:传输模式(AH传输模式、ESP传输模式)、隧道模式(AH隧道模式、ESP隧道模式)</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>祝大家都上岸！🎉🎉🎉</p>]]></content>
      
      
      <categories>
          
          <category> 自考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装部署</title>
      <link href="/2023/10/10/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/10/10/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="传统虚拟机技术"><a href="#传统虚拟机技术" class="headerlink" title="传统虚拟机技术"></a>传统虚拟机技术</h3><ul><li>虚拟机是虚拟出一套硬件，在其上面运行一个完整的操作系统给，例如我们使用KVM，指定系统镜像，然后装系统，最终可以使用，在该系统上再运行所需的应用程序。</li><li>KVM创建虚拟机是，指定较少的cpu，内存，硬盘等资源，虚拟机性能较低。</li></ul><h3 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h3><ul><li>容器内的应用程序直接运行再宿主机的内核上，容器内没有自己的内核，也没有对硬件进行虚拟，因此容器比起虚拟机更为轻便。</li></ul><h4 id="一、docker引擎"><a href="#一、docker引擎" class="headerlink" title="一、docker引擎"></a>一、docker引擎</h4><p><img src="http://image.oldit.cn/article/78c096d9df9b4fffa1cc5f75dfc63b12.webp" alt="docker引擎"></p><h4 id="二、docker最核心的组件"><a href="#二、docker最核心的组件" class="headerlink" title="二、docker最核心的组件"></a>二、docker最核心的组件</h4><ul><li><p>image 镜像，构建容器（应用程序运行所需的环境，打包为镜像文件）</p></li><li><p>Container，容器（我的应用程序，就跑在容器中）</p></li><li><p>镜像仓库（dockerhub）（保存镜像文件，提供上传，下载镜像）作用好比github</p></li><li><p>Dockerfile，将你部署项目的操作，写成一个部署脚本，这就是Dockerfile，且该脚本还能够构建镜像文件</p></li></ul><h4 id="三、安装docker"><a href="#三、安装docker" class="headerlink" title="三、安装docker"></a>三、安装docker</h4><h5 id="1-基础环境配置"><a href="#1-基础环境配置" class="headerlink" title="1. 基础环境配置"></a>1. 基础环境配置</h5><p>提示：docker安装在centos7平台，内核版本不低于3.10，在centos平台运行docker可能会遇见些告警信息，修改内核配置参数，打开内核转发功能。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat &lt;&lt;EOF &gt; /etc/sysctl.d/docker.conf</span></span><br><span class="line">&gt; net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span></span><br><span class="line">&gt; net.bridge.bridge-nf-call-iptables =<span class="number">1</span> </span><br><span class="line">&gt; net.ipv4.conf.default.rp_filter = <span class="number">0</span></span><br><span class="line">&gt; net.ipv4.conf.all.rp_filter = <span class="number">0</span></span><br><span class="line">&gt; net.ipv4.ip_forward = <span class="number">1</span></span><br><span class="line">&gt; EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载修改内核的参数，配置文件</span></span><br><span class="line"><span class="comment"># 按照如下命令，执行顺序</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># modprobe br_netfilter</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sysctl -p /etc/sysctl.d/docker.conf </span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = <span class="number">0</span></span><br><span class="line">net.ipv4.conf.all.rp_filter = <span class="number">0</span></span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="2-建立仓库"><a href="#2-建立仓库" class="headerlink" title="2. 建立仓库"></a>2. 建立仓库</h5><p>安装软件包（提供实用程序）并设置存储库。yum-utilsyum-config-manager</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -<span class="keyword">y</span> yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//d</span>ownload.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="3-安装docker引擎"><a href="#3-安装docker引擎" class="headerlink" title="3. 安装docker引擎"></a>3. 安装docker引擎</h4><p>安装 Docker Engine、containerd 和 Docker Compose：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="4-启动docker"><a href="#4-启动docker" class="headerlink" title="4. 启动docker"></a>4. 启动docker</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="5-测试docker是否安装成功"><a href="#5-测试docker是否安装成功" class="headerlink" title="5. 测试docker是否安装成功"></a>5. 测试docker是否安装成功</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="http://image.oldit.cn/article/139c29ff177745edabcf7271226efef3.webp" alt="运行hello-word"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 编译安装Nginx</title>
      <link href="/2023/10/10/Centos7%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2023/10/10/Centos7%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>nginx以高效的linux网络模型，epoll，event作为网络IO模型，kqueue，在高并发网站情况下，nginx能够轻松支持5w+的并发流量，并且消耗的服务器内存，cpu等资源，也是很低的，运行起来非常稳定。</p><hr><h3 id="一、编译安装nginx"><a href="#一、编译安装nginx" class="headerlink" title="一、编译安装nginx"></a>一、编译安装nginx</h3><p>在Linux系统中，软件的安装方式有两种：</p><ul><li>包管理安装</li><li>编译安装</li></ul><p>编译安装是指用户自己下载软件源代码，然后自己编译、配置、安装的安装方式。编译安装的优点是可以自定义编译选项，可以实现对软件的个性化定制，而缺点是安装过程相对复杂，需要手动编译、配置、安装，并且需要自己处理依赖关系。Nginx是一款高性能的Web服务器，可以作为反向代理服务器或负载均衡服务器使用。在Linux系统中，可以通过包管理器安装Nginx，也可以使用编译安装的方式安装Nginx。下面是关于编译安装Nginx的相关信息。</p><h3 id="二、编译安装过程"><a href="#二、编译安装过程" class="headerlink" title="二、编译安装过程"></a>二、编译安装过程</h3><h4 id="1-操作系统的选择，centos7"><a href="#1-操作系统的选择，centos7" class="headerlink" title="1.操作系统的选择，centos7"></a>1.操作系统的选择，centos7</h4><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release <span class="number">7.6</span>.<span class="number">1810</span> (Core) </span><br><span class="line">[root@hmiking ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux hmiking <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">957</span>.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h5 id="1-1关闭防火墙、selinux"><a href="#1-1关闭防火墙、selinux" class="headerlink" title="1.1关闭防火墙、selinux"></a>1.1关闭防火墙、selinux</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line">[root@hmiking ~]<span class="comment"># setenforce 0</span></span><br><span class="line">setenforce: SELinux is disabled</span><br><span class="line">[root@hmiking ~]<span class="comment"># getenforce </span></span><br><span class="line">Disabled</span><br></pre></td></tr></table></figure><h4 id="2-安装编译开发环境"><a href="#2-安装编译开发环境" class="headerlink" title="2.安装编译开发环境"></a>2.安装编译开发环境</h4><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># yum install -y gcc gcc-c++ autoconf automake make</span></span><br></pre></td></tr></table></figure><h5 id="2-1安装nginx所需的一些第三方系统库的支持"><a href="#2-1安装nginx所需的一些第三方系统库的支持" class="headerlink" title="2.1安装nginx所需的一些第三方系统库的支持"></a>2.1安装nginx所需的一些第三方系统库的支持</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># yum install zlib zlib-devel openssl openssl-devel pcre pcre-devel wget httpd-tools vim -y</span></span><br></pre></td></tr></table></figure><h4 id="3-编译安装nginx"><a href="#3-编译安装nginx" class="headerlink" title="3.编译安装nginx"></a>3.编译安装nginx</h4><h5 id="3-1下载nginx源代码"><a href="#3-1下载nginx源代码" class="headerlink" title="3.1下载nginx源代码"></a>3.1下载nginx源代码</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># wget http://nginx.org/download/nginx-1.17.10.tar.gz</span></span><br></pre></td></tr></table></figure><h5 id="3-2解压缩nginx包，并进入该目录"><a href="#3-2解压缩nginx包，并进入该目录" class="headerlink" title="3.2解压缩nginx包，并进入该目录"></a>3.2解压缩nginx包，并进入该目录</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># tar xf nginx-1.17.10.tar.gz</span></span><br><span class="line">[root@hmiking ~]<span class="comment"># cd nginx-1.17.10</span></span><br><span class="line">[root@hmiking nginx-<span class="number">1.17</span>.<span class="number">10</span>]<span class="comment"># ll    #查看目录下有哪些内容</span></span><br><span class="line">total <span class="number">760</span></span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">6</span> mysql mysql    <span class="number">326</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> auto<span class="comment"># 检测系统模块依赖信息</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> mysql mysql <span class="number">302754</span> Apr <span class="number">14</span>  <span class="number">2020</span> CHANGES<span class="comment"># 存放nginx的变化记录日志</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> mysql mysql <span class="number">462076</span> Apr <span class="number">14</span>  <span class="number">2020</span> CHANGES.ru</span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">2</span> mysql mysql    <span class="number">168</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> conf<span class="comment"># 存放nginx主配置文件的目录</span></span><br><span class="line">-rwxr-xr-<span class="keyword">x</span> <span class="number">1</span> mysql mysql   <span class="number">2502</span> Apr <span class="number">14</span>  <span class="number">2020</span> configure<span class="comment"># 可执行的脚本，用于编译文件的定制脚本</span></span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">4</span> mysql mysql     <span class="number">72</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> contrib<span class="comment"># 提供了vim插件，让配置文件颜色区分，更友好</span></span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">2</span> mysql mysql     <span class="number">40</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> html<span class="comment"># 存放了标准的html页面文件</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> mysql mysql   <span class="number">1397</span> Apr <span class="number">14</span>  <span class="number">2020</span> LICENSE</span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">2</span> mysql mysql     <span class="number">21</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> man</span><br><span class="line">-rw-r--r-- <span class="number">1</span> mysql mysql     <span class="number">49</span> Apr <span class="number">14</span>  <span class="number">2020</span> README</span><br><span class="line">drwxr-xr-<span class="keyword">x</span> <span class="number">9</span> mysql mysql     <span class="number">91</span> Mar  <span class="number">6</span> <span class="number">23</span>:<span class="number">39</span> src<span class="comment"># 存放了nginx源代码的目录</span></span><br></pre></td></tr></table></figure><h5 id="3-3开始编译安装"><a href="#3-3开始编译安装" class="headerlink" title="3.3开始编译安装"></a>3.3开始编译安装</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入软件源代码目录，执行编译脚本文件，如指定安装路径，以及开启额外功能等</span></span><br><span class="line">[root@hmiking nginx-<span class="number">1.17</span>.<span class="number">10</span>]<span class="comment"># mkdir /usr/local/nginx</span></span><br><span class="line">[root@hmiking nginx-<span class="number">1.17</span>.<span class="number">10</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx \</span></span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h5 id="3-4查看安装后的nginx目录"><a href="#3-4查看安装后的nginx目录" class="headerlink" title="3.4查看安装后的nginx目录"></a>3.4查看安装后的nginx目录</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking nginx-<span class="number">1.17</span>.<span class="number">10</span>]<span class="comment"># cd /usr/local/nginx/</span></span><br><span class="line">[root@hmiking nginx]<span class="comment"># ls</span></span><br><span class="line">confhtmllogs   sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># conf 存放nginx的配置文件，如 nginx.conf</span></span><br><span class="line"><span class="comment"># html 存放nginx的网页根目录文件，存放站点的静态文件数据</span></span><br><span class="line"><span class="comment"># logs 存放nginx的各种日志目录</span></span><br><span class="line"><span class="comment"># sbin 存放该软件的可执行命令</span></span><br></pre></td></tr></table></figure><h4 id="4-启动并访问nginx"><a href="#4-启动并访问nginx" class="headerlink" title="4.启动并访问nginx"></a>4.启动并访问nginx</h4><h5 id="4-1将-nginx-添加到全局变量中"><a href="#4-1将-nginx-添加到全局变量中" class="headerlink" title="4.1将 nginx 添加到全局变量中"></a>4.1将 nginx 添加到全局变量中</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过软链接到/usr/local/sbin/ 目录下</span></span><br><span class="line">[root@hmiking nginx]<span class="comment"># ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以快捷的使用nginx各种指令</span></span><br><span class="line">nginx<span class="comment"># 首次直接输入nginx，表示启动该进程</span></span><br></pre></td></tr></table></figure><h5 id="4-2检查nginx的编译安装信息"><a href="#4-2检查nginx的编译安装信息" class="headerlink" title="4.2检查nginx的编译安装信息"></a>4.2检查nginx的编译安装信息</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking nginx]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1.17</span>.<span class="number">10</span></span><br><span class="line">built by gcc <span class="number">4.8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span>.<span class="number">5</span>-<span class="number">44</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1.0</span>.<span class="number">2</span>k-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=<span class="regexp">/usr/l</span>ocal/nginx --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --with-http_stub_status_module --with-threads --with-file-aio</span><br></pre></td></tr></table></figure><h5 id="4-3启动nginx"><a href="#4-3启动nginx" class="headerlink" title="4.3启动nginx"></a>4.3启动nginx</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">[root@hmiking ~]<span class="comment"># nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx进程</span></span><br><span class="line">[root@hmiking ~]<span class="comment"># ps -ef | grep nginx | grep -v grep</span></span><br><span class="line">root      <span class="number">27314</span>      <span class="number">1</span>  <span class="number">0</span> <span class="number">01</span>:<span class="number">28</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: master process nginx</span><br><span class="line">nobody    <span class="number">27315</span>  <span class="number">27314</span>  <span class="number">0</span> <span class="number">01</span>:<span class="number">28</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: worker process</span><br></pre></td></tr></table></figure><h5 id="4-4通过命令行终端访问nginx"><a href="#4-4通过命令行终端访问nginx" class="headerlink" title="4.4通过命令行终端访问nginx"></a>4.4通过命令行终端访问nginx</h5><p>代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># curl localhost</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">        width: 35em;</span></span><br><span class="line"><span class="regexp">        margin: 0 auto;</span></span><br><span class="line"><span class="regexp">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/s</span>tyle&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;h1&gt;Welcome to nginx!&lt;/</span>h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed <span class="keyword">and</span></span><br><span class="line">working. Further configuration is required.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;For online documentation and support please refer to</span></span><br><span class="line"><span class="regexp">&lt;a href=&quot;http:/</span><span class="regexp">/nginx.org/</span><span class="string">&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span><br><span class="line"><span class="string">Commercial support is available at</span></span><br><span class="line"><span class="string">&lt;a href=&quot;</span>http:<span class="regexp">//nginx</span>.com/<span class="string">&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-5通过浏览器访问nginx"><a href="#4-5通过浏览器访问nginx" class="headerlink" title="4.5通过浏览器访问nginx"></a>4.5通过浏览器访问nginx</h5><p><img src="http://image.oldit.cn/article/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx.webp" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keepalived+Nginx双机热备实验</title>
      <link href="/2023/10/10/Keepalived+Nginx%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/10/10/Keepalived+Nginx%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Keepalived是一款高可用性的服务，它可以帮助您在云服务器上实现负载均衡和故障转移。该服务通过VRRP协议实现了主备节点之间的故障切换和负载均衡。</li><li>VRRP是一种虚拟路由器冗余协议，它能够在网络中的节点故障时自动将工作负载转移到备用节点上，从而保证网络的高可用性。Keepalive软件与VRRP协议结合使用，可以实现更加可靠和稳定的高可用性。</li><li>Keepalived的主要功能包括管理LVS负载均衡软件、实现对LVS集群节点健康检查的功能、作为系统网络服务的高可用功能以及作为高可用故障切换转移原理。当Keppalived服务正常工作时，主Master节点会不断地向备节点发送心跳消息，告诉备Backup节点自己还活着。当主Master节点发生故障时，备节点会调用自身的接管程序，接管主Master节点的IP资源及服务。当主Master节点恢复时，备Backup节点又会释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。</li></ul><h3 id="一、Keepalived的工作过程"><a href="#一、Keepalived的工作过程" class="headerlink" title="一、Keepalived的工作过程"></a>一、Keepalived的工作过程</h3><p>Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。</p><h3 id="二、Keepalived-Nginx双机热备实验"><a href="#二、Keepalived-Nginx双机热备实验" class="headerlink" title="二、Keepalived+Nginx双机热备实验"></a>二、Keepalived+Nginx双机热备实验</h3><h4 id="1、基础环境"><a href="#1、基础环境" class="headerlink" title="1、基础环境"></a>1、基础环境</h4><table><thead><tr><th>机器</th><th>主备</th><th>IP地址</th></tr></thead><tbody><tr><td>nginx-1</td><td>主</td><td>192.168.222.143</td></tr><tr><td>nginx-2</td><td>备</td><td>192.168.222.167</td></tr><tr><td>客户端&#x2F;windows</td><td>&#x2F;</td><td>192.168.222.1</td></tr></tbody></table><h5 id="1-1、关闭防火墙和selinux"><a href="#1-1、关闭防火墙和selinux" class="headerlink" title="1.1、关闭防火墙和selinux"></a>1.1、关闭防火墙和selinux</h5><p>nginx-1和nginx-2的配置如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># getenforce </span></span><br><span class="line">Disabled</span><br></pre></td></tr></table></figure><h4 id="2、安装nginx"><a href="#2、安装nginx" class="headerlink" title="2、安装nginx"></a>2、安装nginx</h4><p>配置好阿里的yum源，使用yum安装nginx。<br>nignx-1和nginx-2配置如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nginx-<span class="number">1</span>：</span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/<span class="number">1.20</span>.<span class="number">1</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># systemctl enable nginx# 设置开机自启</span></span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># systemctl start nginx# 启动nginx</span></span><br><span class="line"></span><br><span class="line">nginx-<span class="number">2</span>：</span><br><span class="line">[root@nginx-<span class="number">2</span> ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line">[root@nginx-<span class="number">2</span> ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/<span class="number">1.20</span>.<span class="number">1</span></span><br><span class="line">[root@nginx-<span class="number">2</span> ~]<span class="comment"># systemctl enable nginx# 设置开机自启</span></span><br><span class="line">[root@nginx-<span class="number">2</span> ~]<span class="comment"># systemctl start nginx# 启动nginx</span></span><br></pre></td></tr></table></figure><h5 id="2-1、nginx的一些默认配置文件路径"><a href="#2-1、nginx的一些默认配置文件路径" class="headerlink" title="2.1、nginx的一些默认配置文件路径"></a>2.1、nginx的一些默认配置文件路径</h5><ul><li>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf# nginx的默认配置文件</li><li>&#x2F;etc&#x2F;nginx&#x2F;conf.d# nginx的自定义配置文件</li><li>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;# nginx的默认网页存放目录</li><li>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;# nginx的日志文件存放目录</li></ul><h5 id="2-2、对nginx的网页页面进行修改"><a href="#2-2、对nginx的网页页面进行修改" class="headerlink" title="2.2、对nginx的网页页面进行修改"></a>2.2、对nginx的网页页面进行修改</h5><p>修改nginx的默认页面文件，以便客户端测试查看效果<br>nginx-1和nginx-2的配置如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nginx-<span class="number">1</span>配置：</span><br><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># cd /usr/share/nginx/html/</span></span><br><span class="line">[root@nginx-<span class="number">1</span> html]<span class="comment"># ls</span></span><br><span class="line"><span class="number">404</span>.html  en-US  img         nginx-logo.png</span><br><span class="line"><span class="number">50</span>x.html  icons  index.html  poweredby.png</span><br><span class="line">[root@nginx-<span class="number">1</span> html]<span class="comment"># echo &quot;&lt;h1&gt;This is nginx-1&lt;/h1&gt;&quot; &gt; index.html </span></span><br><span class="line">[root@nginx-<span class="number">1</span> html]<span class="comment"># cat index.html </span></span><br><span class="line">&lt;h1&gt;This is nginx-<span class="number">1</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">nginx-2配置：</span></span><br><span class="line"><span class="regexp">[root@nginx-2 ~]# cd /usr</span><span class="regexp">/share/nginx</span><span class="regexp">/html/</span></span><br><span class="line">[root@nginx-<span class="number">2</span> html]<span class="comment"># ls</span></span><br><span class="line"><span class="number">404</span>.html  en-US  img         nginx-logo.png</span><br><span class="line"><span class="number">50</span>x.html  icons  index.html  poweredby.png</span><br><span class="line">[root@nginx-<span class="number">2</span> html]<span class="comment"># echo &quot;&lt;h1&gt;This is nginx-2&lt;/h1&gt;&quot; &gt; index.html </span></span><br><span class="line">[root@nginx-<span class="number">2</span> html]<span class="comment"># cat index.html </span></span><br><span class="line">&lt;h1&gt;This is nginx-<span class="number">2</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="3、安装Keepalived"><a href="#3、安装Keepalived" class="headerlink" title="3、安装Keepalived"></a>3、安装Keepalived</h4><p>nginx-1和nginx-2 使用yum安装</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># yum install keepalived -y</span></span><br><span class="line">[root@nginx-<span class="number">2</span> ~]<span class="comment"># yum install keepalived -y</span></span><br></pre></td></tr></table></figure><h5 id="3-1、修改配置文件"><a href="#3-1、修改配置文件" class="headerlink" title="3.1、修改配置文件"></a>3.1、修改配置文件</h5><p>默认的配置文件在&#x2F;etc&#x2F;keepalived目录下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-<span class="number">1</span> ~]<span class="comment"># cd /etc/keepalived/</span></span><br><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># ls</span></span><br><span class="line">keepalived.conf</span><br><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># cp keepalived.conf keepalived.conf.bak# 配置文件内容很多，可以备份以防万一</span></span><br></pre></td></tr></table></figure><h5 id="3-2、分别修改nginx-1和nginx-2的配置文件"><a href="#3-2、分别修改nginx-1和nginx-2的配置文件" class="headerlink" title="3.2、分别修改nginx-1和nginx-2的配置文件"></a>3.2、分别修改nginx-1和nginx-2的配置文件</h5><p>nginx-1（主）配置：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># &gt; keepalived.conf</span></span><br><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># vim keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   vrrp_mcast_group4 <span class="number">224.100</span>.<span class="number">100.100</span>    <span class="comment"># 指定一个广播地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入周期性检测nginx服务脚本的相关配置</span></span><br><span class="line">vrrp_script check_nginx&#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span> <span class="comment"># 心跳执行的脚本，检测nginx是否启动</span></span><br><span class="line">    interval <span class="number">1</span>                           <span class="comment"># 检测脚本执行的间隔，单位是秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="keyword">state</span> MASTER                        <span class="comment"># 标识状态为MASTER</span></span><br><span class="line">    interface ens33                     <span class="comment"># 修改网卡名称</span></span><br><span class="line">    virtual_router_id <span class="number">51</span>                <span class="comment"># 定义组vriid，同一组virtual_router_id必须相同</span></span><br><span class="line">    priority <span class="number">100</span>                        <span class="comment"># 优先级，MASTER权重要高于BACKUP</span></span><br><span class="line">    advert_int <span class="number">1</span>                        <span class="comment"># MASTER 与 BACKIP 负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">222.220</span><span class="comment"># 设置虚拟IP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">     track_script&#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure><p><strong>nginx-2（备）配置</strong>：<br><code>由于主备的配置是一样的，只需要修改部分参数，可以通过scp命令把nginx-1的配置文件传到nginx-2上</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># scp keepalived.conf 192.168.222.167:`pwd`</span></span><br><span class="line">keepalived.conf                               <span class="number">100</span>% <span class="number">1044</span>   <span class="number">887.9</span>KB/s   <span class="number">00</span>:<span class="number">00</span>   </span><br><span class="line"></span><br><span class="line">[root@nginx-<span class="number">2</span> keepalived]<span class="comment"># vim keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   vrrp_mcast_group4 <span class="number">224.100</span>.<span class="number">100.100</span>    <span class="comment"># 指定一个广播地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入周期性检测nginx服务脚本的相关配置</span></span><br><span class="line">vrrp_script check_nginx&#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span>             <span class="comment"># 心跳执行的脚本，检测nginx是否启动</span></span><br><span class="line">    interval <span class="number">1</span>                                          <span class="comment"># 检测脚本执行的间隔，单位是秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="keyword">state</span> BACKUP                        <span class="comment"># 标识状态为MASTER</span></span><br><span class="line">    interface ens33                     <span class="comment"># 修改网卡名称</span></span><br><span class="line">    virtual_router_id <span class="number">51</span>                <span class="comment"># 定义组vriid，同一组virtual_router_id必须相同</span></span><br><span class="line">    priority <span class="number">99</span>                         <span class="comment"># 优先级，MASTER权重要高于BACKUP</span></span><br><span class="line">    advert_int <span class="number">1</span>                        <span class="comment"># MASTER 与 BACKIP 负载均衡器之间同步检查的时间间隔，单位是秒</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">123456</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">192.168</span>.<span class="number">222.220</span>                                 <span class="comment"># 设置虚拟IP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">     track_script&#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">[root@nginx-<span class="number">2</span> keepalived]<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure><h5 id="3-3、查看ip"><a href="#3-3、查看ip" class="headerlink" title="3.3、查看ip"></a>3.3、查看ip</h5><p><code>此时通过ip a去查看两台nginx服务器，只有nginx-1主备是有虚拟ip地址，只有等nginx-1宕机后，才会转移到nginx-2上</code><br>nginx-1:<br><img src="http://image.oldit.cn/article/c8fabda1545c42c5b2fa56a3c1c4739f.webp" alt="在这里插入图片描述"><br>nginx-2:<br><img src="http://image.oldit.cn/article/2948160c1dbe4686bafb5e07d8846c5a.webp" alt="在这里插入图片描述"></p><h5 id="3-4、编写nginx存活脚本"><a href="#3-4、编写nginx存活脚本" class="headerlink" title="3.4、编写nginx存活脚本"></a>3.4、编写nginx存活脚本</h5><ul><li>由于keepalived是通过内核转发请求判断主备服务器是否在线，而nginx是应用程序，它有进程意外退出的可能性，不涉及内核，所以nginx挂了keepalived并不能作出相应的判断来切换备服务器，这时需要使用一个脚本来实时监控nginx进程是否存在，如果不存在则重启开启，重启开启不了杀掉当前主机中的keepalived服务来实现故障切换。开启keepalived后脚本自动执行</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在/etc/keepalived目录下创建nginx存活检测脚本</span></span><br><span class="line">[root@localhost keepalived]<span class="comment"># vim check_nginx.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#检测nginx是否存活脚本</span></span><br><span class="line">A=<span class="string">`ps -C nginx --no-header | wc -l`</span></span><br><span class="line"><span class="keyword">if</span> [ $A -eq <span class="number">0</span> ];then                                        <span class="comment">#如果nginx没有启动就启动nginx                        </span></span><br><span class="line">      systemctl start nginx                                 <span class="comment">#重启nginx</span></span><br><span class="line">      <span class="keyword">if</span> [ <span class="string">`ps -C nginx --no-header |wc -l`</span> -eq <span class="number">0</span> ];then    <span class="comment">#nginx重启失败，则停掉keepalived服务，进行VIP转移</span></span><br><span class="line">              killall keepalived</span><br><span class="line">      fi</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">给脚本执行权限</span><br><span class="line">[root@localhost keepalived]<span class="comment"># chmod 755 check_nginx.sh </span></span><br><span class="line"></span><br><span class="line">并把脚本传入nginx-<span class="number">2</span>服务器上</span><br><span class="line">[root@nginx-<span class="number">1</span> keepalived]<span class="comment"># scp check_nginx.sh 192.168.222.167:`pwd`</span></span><br><span class="line">check_nginx.sh  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、客户端测试"><a href="#4、客户端测试" class="headerlink" title="4、客户端测试"></a>4、客户端测试</h4><h5 id="4-1、分别对两台nginx服务器进行访问"><a href="#4-1、分别对两台nginx服务器进行访问" class="headerlink" title="4.1、分别对两台nginx服务器进行访问"></a>4.1、分别对两台nginx服务器进行访问</h5><p><img src="http://image.oldit.cn/article/a69486c4ba514d4fae5542fa1e7c2203.webp"></p><h5 id="4-2、对VIP进行访问"><a href="#4-2、对VIP进行访问" class="headerlink" title="4.2、对VIP进行访问"></a>4.2、对VIP进行访问</h5><p><img src="http://image.oldit.cn/article/dc5fdb25e37a4cf78c4f2db489601403.webp" alt="在这里插入图片描述"><br><code>看到的结果是nginx-1的服务器，因为nginx-1服务器是master主服务器</code></p><h5 id="4-3、故障测试"><a href="#4-3、故障测试" class="headerlink" title="4.3、故障测试"></a>4.3、故障测试</h5><ul><li>模拟服务器故障，如果nginx-1服务器突然宕机后，让keepalived实现自动故障转移，让客户端访问的页面到backup服务器上<br><img src="http://image.oldit.cn/article/c8700687001c4c3ebe9395e7b8c7faff.webp" alt="在这里插入图片描述"></li><li>此时再次尝试访问刷新VIP查看结果<br><img src="http://image.oldit.cn/article/c4b98a1fe0484155a2222bc3208ad389.webp"><br><code>此时访问的页面是nginx-2服务器提供的，VIP也已经到nginx-2服务器的ens33网卡上</code><br><img src="http://image.oldit.cn/article/c513c9ae4cd54cf99b7e743afe3fab1b.webp" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx主配置文件中文注释</title>
      <link href="/2023/10/10/Nginx%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/"/>
      <url>/2023/10/10/Nginx%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx主配置文件"><a href="#Nginx主配置文件" class="headerlink" title="Nginx主配置文件"></a>Nginx主配置文件</h3><h4 id="nginx-conf指令注释"><a href="#nginx-conf指令注释" class="headerlink" title="nginx.conf指令注释"></a>nginx.conf指令注释</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="comment"># user nobady nobady;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx进程数，建议设置为等于CPU总核心数,默认为1。</span></span><br><span class="line">worker_processes <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">error_log /usr/<span class="keyword">local</span>/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件,指定nginx进程运行文件存放地址</span></span><br><span class="line">pid /usr/<span class="keyword">local</span>/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment"># 工作模式与连接数上限</span></span><br><span class="line"><span class="comment"># 这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment"># 现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4 万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll]; epoll模型</span></span><br><span class="line"> <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line"> <span class="comment">#补充说明：</span></span><br><span class="line"> <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line"> <span class="comment">#A）标准事件模型</span></span><br><span class="line"> <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line"> <span class="comment">#B）高效事件模型</span></span><br><span class="line"> <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line"> <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line"> <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line"> <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line"> <span class="keyword">use</span> epoll;</span><br><span class="line"> <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line"> <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class="line"> worker_connections <span class="number">65535</span>;</span><br><span class="line"> <span class="comment">#keepalive超时时间，默认是60s，切记这个参数也不能设置过大！否则会导致许多无效的http连接占据着nginx的连接数，终nginx崩溃！</span></span><br><span class="line"> keepalive_timeout <span class="number">60</span>;</span><br><span class="line"> <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line"> <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line"> <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line"> <span class="comment">#4096</span></span><br><span class="line"> <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line"> client_header_buffer_size <span class="number">4</span>k;</span><br><span class="line"> <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line"> open_file_cache max=<span class="number">65535</span> inactive=<span class="number">60</span>s;</span><br><span class="line"> <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line"> <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line"> open_file_cache_valid <span class="number">60</span>s;</span><br><span class="line"> <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line"> <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line"> open_file_cache_min_uses <span class="number">1</span>;</span><br><span class="line"><span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line"> open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line"> include mime.types;</span><br><span class="line"> <span class="comment">#默认文件类型</span></span><br><span class="line"> default_type application/octet-stream;</span><br><span class="line"> <span class="comment">#默认编码</span></span><br><span class="line"> <span class="comment">#charset utf-8;</span></span><br><span class="line"> <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line"> <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line"> server_names_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"> <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line"> client_header_buffer_size <span class="number">32</span>k;</span><br><span class="line"> <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line"> large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line"> <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line"> client_max_body_size <span class="number">8</span>m;</span><br><span class="line"> <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line"> <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line"> sendfile on;</span><br><span class="line"> <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line"> autoindex on;</span><br><span class="line"> <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用,告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞</span></span><br><span class="line"> tcp_nopush on;</span><br><span class="line"><span class="comment">#告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值</span></span><br><span class="line"> tcp_nodelay on;</span><br><span class="line"> <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line"> keepalive_timeout <span class="number">120</span>;</span><br><span class="line"> <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line"> <span class="comment">#这个指令为FastCGI缓存指定一个路径，目录结构等级，关键字区域存储时间和非活动删除时间</span></span><br><span class="line"> fastcgi_cache_path /usr/<span class="keyword">local</span>/nginx/fastcgi_cache levels=<span class="number">1</span>:<span class="number">2</span></span><br><span class="line"> keys_zone=TEST:<span class="number">10</span>m inactive=<span class="number">5</span>m;</span><br><span class="line"> <span class="comment">#指定连接到后端FastCGI的超时时间</span></span><br><span class="line"> fastcgi_connect_timeout <span class="number">300</span>;</span><br><span class="line"> <span class="comment">#向FastCGI传送请求的超时时间，这个值是指已经完成两次握手后向FastCGI传送请求的超时时间</span></span><br><span class="line"> fastcgi_send_timeout <span class="number">300</span>;</span><br><span class="line"> <span class="comment">#接收FastCGI应答的超时时间，这个值是指已经完成两次握手后接收FastCGI应答的超时时间</span></span><br><span class="line"> fastcgi_read_timeout <span class="number">300</span>;</span><br><span class="line"> <span class="comment">#指定读取FastCGI应答第一部分 需要用多大的缓冲区,这里可以设置为fastcgi_buffers指令指定的缓冲区大小，上面的指令指定它将使用1个 16k的缓冲区去读取应答的第一部分，即应答头，其实这个应答头一般情况下都很小（不会超过1k），但是你如果在fastcgi_buffers指令中指定了缓冲区的大小，那么它也会分配一个fastcgi_buffers指定的缓冲区大小去缓存</span></span><br><span class="line"> fastcgi_buffer_size <span class="number">64</span>k;</span><br><span class="line"> <span class="comment">#指定本地需要用多少和多大的缓冲区来 缓冲FastCGI的应答，如上所示，如果一个php脚本所产生的页面大小为256k，则会为其分配16个16k的缓冲区来缓存，如果大于256k，增大 于256k的部分会缓存到fastcgi_temp指定的路径中， 当然这对服务器负载来说是不明智的方案，因为内存中处理数据速度要快于硬盘，通常这个值 的设置应该选择一个你的站点中的php脚本所产生的页面大小的中间值，比如你的站点大部分脚本所产生的页面大小为 256k就可以把这个值设置为16 16k，或者464k 或者64 4k，但很显然，后两种并不是好的设置方法，因为如果产生的页面只有32k，如果用464k它会分配1个64k的缓冲区去缓存，而如果使用64 4k它会分配8个4k的缓冲区去缓存，而如果使用16 16k则它会分配2个16k去缓存页面，这样看起来似乎更加合理•</span></span><br><span class="line"> fastcgi_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line"> <span class="comment">#这个指令我也不知道是做什么用，只知道默认值是fastcgi_buffers的两倍</span></span><br><span class="line"> fastcgi_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line"> <span class="comment">#在写入fastcgi_temp_path时将用多大的数据块，默认值是fastcgi_buffers的两倍</span></span><br><span class="line"> fastcgi_temp_file_write_size <span class="number">128</span>k;</span><br><span class="line"> <span class="comment">#开启FastCGI缓存并且为其制定一个名称。个人感觉开启缓存非常有用，可以有效降低CPU负载，并且防止502错误。但是这个缓存会引起很多问题，因为它缓存的是动态页面。具体使用还需根据自己的需求</span></span><br><span class="line"> fastcgi_cache TEST</span><br><span class="line"> <span class="comment">#为指定的应答代码指定缓存时间，如上例中将200，302应答缓存一小时，301应答缓存1天，其他为1分钟</span></span><br><span class="line"> fastcgi_cache_valid <span class="number">200</span> <span class="number">302</span> <span class="number">1</span>h;</span><br><span class="line"> fastcgi_cache_valid <span class="number">301</span> <span class="number">1</span>d;</span><br><span class="line"> fastcgi_cache_valid any <span class="number">1</span>m;</span><br><span class="line"> <span class="comment">#缓存在fastcgi_cache_path指令inactive参数值时间内的最少使用次数，如上例，如果在5分钟内某文件1次也没有被使用，那么这个文件将被移除</span></span><br><span class="line"> fastcgi_cache_min_uses <span class="number">1</span>;</span><br><span class="line"> <span class="comment">#gzip模块设置</span></span><br><span class="line"> <span class="comment">#开启压缩 </span></span><br><span class="line">gzip  on;  </span><br><span class="line"> <span class="comment"># 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于2k的字节数，小于2k可能会越压越大。</span></span><br><span class="line">gzip_min_length <span class="number">2</span>k; </span><br><span class="line"> <span class="comment"># 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。 </span></span><br><span class="line"> <span class="comment"># 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。 </span></span><br><span class="line"> gzip_buffers <span class="number">4</span> <span class="number">16</span>k; </span><br><span class="line"> <span class="comment">#压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间 </span></span><br><span class="line"> gzip_comp_level <span class="number">5</span>; </span><br><span class="line"> <span class="comment"># 默认值: gzip_types text/html (默认不对js/css文件进行压缩) </span></span><br><span class="line"> <span class="comment"># 压缩类型，匹配MIME类型进行压缩 </span></span><br><span class="line"> <span class="comment"># 不能用通配符 text/* </span></span><br><span class="line"> <span class="comment"># (无论是否指定)text/html默认已经压缩  </span></span><br><span class="line"> <span class="comment"># 设置哪压缩种文本文件可参考 conf/mime.types </span></span><br><span class="line"> gzip_types text/plain application/<span class="keyword">x</span>-</span><br><span class="line"> javascript text/css application/xml;</span><br><span class="line"> <span class="comment"># 值为1.0和1.1 代表是否压缩http协议1.0，选择1.0则1.0和1.1都可以压缩 </span></span><br><span class="line"> gzip_http_version <span class="number">1.0</span>  </span><br><span class="line"> <span class="comment"># IE6及以下禁止压缩 </span></span><br><span class="line"> gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;  </span><br><span class="line"> <span class="comment"># 默认值：off </span></span><br><span class="line"> <span class="comment"># Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含&quot;Via&quot;的 header头。 </span></span><br><span class="line"> <span class="comment"># off - 关闭所有的代理结果数据的压缩 </span></span><br><span class="line"> <span class="comment"># expired - 启用压缩，如果header头中包含 &quot;Expires&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># no-cache - 启用压缩，如果header头中包含 &quot;Cache-Control:no-cache&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># no-store - 启用压缩，如果header头中包含 &quot;Cache-Control:no-store&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># private - 启用压缩，如果header头中包含 &quot;Cache-Control:private&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># no_last_modified - 启用压缩,如果header头中不包含 &quot;Last-Modified&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># no_etag - 启用压缩 ,如果header头中不包含 &quot;ETag&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># auth - 启用压缩 , 如果header头中包含 &quot;Authorization&quot; 头信息 </span></span><br><span class="line"> <span class="comment"># any - 无条件启用压缩 </span></span><br><span class="line"> gzip_proxied expired <span class="keyword">no</span>-cache <span class="keyword">no</span>-store private auth; </span><br><span class="line"> <span class="comment"># 给CDN和代理服务器使用，针对相同url，可以根据头信息返回压缩和非压缩副本 </span></span><br><span class="line"> gzip_vary on; </span><br><span class="line"> <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line"> <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#负载均衡配置</span></span><br><span class="line"> upstream www.xx.com &#123;</span><br><span class="line">   <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">   server <span class="number">192.168</span>.<span class="number">1.111</span>:<span class="number">80</span> weight=<span class="number">2</span>;</span><br><span class="line">   server <span class="number">192.168</span>.<span class="number">1.112</span>:<span class="number">80</span> weight=<span class="number">3</span>;</span><br><span class="line">   server <span class="number">192.168</span>.<span class="number">1.113</span>:<span class="number">80</span> weight=<span class="number">3</span>;</span><br><span class="line">   <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">   <span class="comment">#1、轮询（默认）</span></span><br><span class="line">   <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">   <span class="comment">#2、weight</span></span><br><span class="line">   <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">   <span class="comment">#例如：</span></span><br><span class="line"><span class="comment">#upstream bakend &#123;</span></span><br><span class="line">   <span class="comment">#  server 192.168.0.14 weight=10;</span></span><br><span class="line">   <span class="comment">#  server 192.168.0.15 weight=10;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment">#2、ip_hash</span></span><br><span class="line">   <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">   <span class="comment">#例如：</span></span><br><span class="line">   <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">   <span class="comment">#  ip_hash;</span></span><br><span class="line">   <span class="comment">#  server 192.168.0.14:88;</span></span><br><span class="line">   <span class="comment">#  server 192.168.0.15:80;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment">#3、fair（第三方）</span></span><br><span class="line">   <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">   <span class="comment">#upstream backend &#123;</span></span><br><span class="line">   <span class="comment">#  server server1;</span></span><br><span class="line">   <span class="comment">#  server server2;</span></span><br><span class="line">   <span class="comment">#  fair;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">   <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">   <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">   <span class="comment">#upstream backend &#123;</span></span><br><span class="line">   <span class="comment">#  server squid1:3128;</span></span><br><span class="line">   <span class="comment">#  server squid2:3128;</span></span><br><span class="line">   <span class="comment">#  hash $request_uri;</span></span><br><span class="line">   <span class="comment">#  hash_method crc32;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment">#tips:</span></span><br><span class="line">   <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">   <span class="comment">#  ip_hash;</span></span><br><span class="line">   <span class="comment">#  server 127.0.0.1:9090 down;</span></span><br><span class="line">   <span class="comment">#  server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">   <span class="comment">#  server 127.0.0.1:6060;</span></span><br><span class="line">   <span class="comment">#  server 127.0.0.1:7070 backup;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line">   <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">   <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">   <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">   <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">   <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">   <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line">   <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">   <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">   <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">   <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">#虚拟主机的配置</span></span><br><span class="line"> server</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">#监听端口</span></span><br><span class="line">   <span class="keyword">listen</span> <span class="number">80</span>;</span><br><span class="line">   <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">   server_name www.xx.com xx.com;</span><br><span class="line">   <span class="keyword">index</span> index.html index.htm index.php;</span><br><span class="line">   root /data/www/xx;</span><br><span class="line">   <span class="comment">#对******进行负载均衡</span></span><br><span class="line">   location ~ .*.(php|php5)?$</span><br><span class="line">   &#123;</span><br><span class="line">     fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9000</span>;</span><br><span class="line">     fastcgi_index index.php;</span><br><span class="line">     include fastcgi.conf;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#图片缓存时间设置</span></span><br><span class="line">   location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">   &#123;</span><br><span class="line">     expires <span class="number">10</span>d;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">   location ~ .*.(js|css)?$</span><br><span class="line">   &#123;</span><br><span class="line">     expires <span class="number">1</span>h;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#日志格式设定</span></span><br><span class="line">   <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">   <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">   <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">   <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">   <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">   <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">   <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">   <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">   <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。</span></span><br><span class="line">   <span class="comment">#反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">   log_format access <span class="string">&#x27;$remote_addr - $remote_user [$time_local]</span></span><br><span class="line"><span class="string">   &quot;$request&quot; &#x27;</span></span><br><span class="line">   <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">   <span class="string">&#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">   access_log /usr/<span class="keyword">local</span>/nginx/logs/host.access.log main;</span><br><span class="line">   access_log /usr/<span class="keyword">local</span>/nginx/logs/host.access.<span class="number">404</span>.log log404;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#对 &quot;/&quot; 启用反向代理</span></span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">88</span>;</span><br><span class="line">     proxy_redirect off;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">     proxy_set_header Host $host;</span><br><span class="line">     <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">     client_max_body_size <span class="number">10</span>m;</span><br><span class="line">     <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">     <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">     <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回</span></span><br><span class="line">     <span class="number">500</span> Internal Server Error错误</span><br><span class="line">     client_body_buffer_size <span class="number">128</span>k;</span><br><span class="line">     <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">     proxy_intercept_errors on;</span><br><span class="line">     <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">     <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">     proxy_connect_timeout <span class="number">90</span>;</span><br><span class="line">     <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">     <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">     proxy_send_timeout <span class="number">90</span>;</span><br><span class="line">     <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">     <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">     proxy_read_timeout <span class="number">90</span>;</span><br><span class="line">     <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">     <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">     proxy_buffer_size <span class="number">4</span>k;</span><br><span class="line">     <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">     <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">     proxy_buffers <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line">     <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">     proxy_busy_buffers_size <span class="number">64</span>k;</span><br><span class="line">     <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">     <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">     proxy_temp_file_write_size <span class="number">64</span>k;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">    location /NginxStatus &#123;</span><br><span class="line">     stub_status on;</span><br><span class="line">     access_log on;</span><br><span class="line">     auth_basic <span class="string">&quot;NginxStatus&quot;</span>;</span><br><span class="line">     auth_basic_user_file confpasswd;</span><br><span class="line">     <span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">   <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">   location ~ .(jsp|jspx|<span class="keyword">do</span>)?$ &#123;</span><br><span class="line">     proxy_set_header Host $host;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For </span><br><span class="line">    $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_pass http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">   location ~ .*.</span><br><span class="line">  (htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">   pdf|xls|mp3|wma)$</span><br><span class="line">   &#123;</span><br><span class="line">     expires <span class="number">15</span>d;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   location ~ .*.(js|css)?$</span><br><span class="line">   &#123;</span><br><span class="line">     expires <span class="number">1</span>h;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nginx-conf-重要的指令块"><a href="#nginx-conf-重要的指令块" class="headerlink" title="nginx.conf 重要的指令块"></a>nginx.conf 重要的指令块</h3><p>核心功能都在于http{ } 指令块里，http{ } 块还包含了以下指令</p><ul><li>server{ }指令块，对应一个站点配置，反向代理，静态资源站点</li><li>location{ }，对应一个url</li><li>upstream{ }，定义上游服务，负载均衡池</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell内置命令、外置命令</title>
      <link href="/2023/02/12/Shell%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%E3%80%81%E5%A4%96%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/02/12/Shell%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%E3%80%81%E5%A4%96%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Shell内置命令、外置命令"><a href="#Shell内置命令、外置命令" class="headerlink" title="Shell内置命令、外置命令"></a>Shell内置命令、外置命令</h3><h4 id="什么是内置命令，什么是外置命令？"><a href="#什么是内置命令，什么是外置命令？" class="headerlink" title="什么是内置命令，什么是外置命令？"></a>什么是内置命令，什么是外置命令？</h4><ul><li>内置命令：在系统启动时就加载入内存，常驻内存，执行效率更高，但是占用资源</li><li>外置命令：系统需要从硬盘中读取程序文件，再读入内存加载</li></ul><h5 id="外置命令"><a href="#外置命令" class="headerlink" title="外置命令"></a>外置命令</h5><p>也称之为，自己单独下载的文件系统命令，处于bash shell之外的程序</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般目录会存放在以下目录</span></span><br><span class="line">/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/sbin</span><br><span class="line">/usr/sbin</span><br><span class="line"></span><br><span class="line">[root@hmiking ~]<span class="comment"># which cd  </span></span><br><span class="line">/usr/bin/cd </span><br></pre></td></tr></table></figure><p>比如ps命令</p><p>通过linux的type命令，验证是否是内置、外置命令</p><p>外置命令的特点是：一定会开启子进程执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hmiking ~]<span class="comment"># ps -f --forest                           </span></span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD     </span><br><span class="line">root        2389    2379  0 Feb03 pts/0    00:00:00 -bash </span><br><span class="line">root        2471    2389  0 00:09 pts/0    00:00:00  \_ ps -f --forest</span><br></pre></td></tr></table></figure><h5 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h5><ul><li>内置命令不会产生子进程去执行</li><li>内置命令和shell是为一体的，是shell的一部分，不需要单独去读取某个文件，系统启动后，就执行在内存中了</li></ul><p>type命令验证即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看Linux的内置shell命令</span></span><br><span class="line"></span><br><span class="line">[root@hmiking ~]<span class="comment"># compgen -b</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量的设置</title>
      <link href="/2023/02/12/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/02/12/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><ol><li><p>环境变量一般指的是用export内置命令导出的变量，用于定义shell的运行环境、保证shell命令的正确执行。shell通过环境变量确定登录的用户名、PATH路径、文件系统等各种应用。</p></li><li><p>环境变量可以在命今行中临时创建，但是用户退出shell终端，变量即丢失，如要永久生效，需要修改 环境变量配置文件</p><ul><li><p>用户个人配置文件 ~&#x2F;.bash_profile 、 ~&#x2F;.bashrc远程登录用户特有文件</p></li><li><p>全局配置文件 &#x2F;etc&#x2F;profile 、 &#x2F;ete&#x2F;bashrc ，且系统建议最好创建在 &#x2F;etc&#x2F;profile.d&#x2F;，而非直接修改主文件，修改全局配置文件，影响所有登录系统的用户</p></li></ul></li></ol><h3 id="检查系统环境变量的命令"><a href="#检查系统环境变量的命令" class="headerlink" title="检查系统环境变量的命令"></a>检查系统环境变量的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>，输出所有变量，包括全局变量、局部变量</span><br><span class="line"><span class="built_in">env</span>，只显示全局变量</span><br><span class="line"><span class="built_in">declare</span>，输出所有的变量，如同<span class="built_in">set</span></span><br><span class="line"><span class="built_in">export</span>，显示和设置环境变量值</span><br></pre></td></tr></table></figure><h4 id="撤销环境变量"><a href="#撤销环境变量" class="headerlink" title="撤销环境变量"></a>撤销环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span>变量名，删除变量或函数</span><br></pre></td></tr></table></figure><h4 id="设置只读变量"><a href="#设置只读变量" class="headerlink" title="设置只读变量"></a>设置只读变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">readonly</span>，只有shell结束，只读变量失效</span><br><span class="line"></span><br><span class="line">[root@hmiking ~]<span class="comment"># readonly name=&quot;hmiking&quot;                </span></span><br><span class="line">[root@hmiking ~]<span class="comment"># name=&quot;111&quot;                   </span></span><br><span class="line">bash: name: <span class="built_in">readonly</span> variable </span><br></pre></td></tr></table></figure><h4 id="系统保留环境变量关键字"><a href="#系统保留环境变量关键字" class="headerlink" title="系统保留环境变量关键字"></a>系统保留环境变量关键字</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bash内嵌了诸多环境变量，用于定义bash的工作环境</span><br><span class="line"></span><br><span class="line">[root@hmiking ~]<span class="comment"># export |awk -F &#x27;[ :=]&#x27; &#x27;&#123;print $3&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这条命令能把环境变量的名字给列出来</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本语言</title>
      <link href="/2023/02/12/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/02/12/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><ol><li><p>shell脚本语言属于一种弱类型语言 无需声明变量类型，直接定义使用。</p></li><li><p>强类型语言，必须先定义变量类型，确定是数字、字符串等，之后再赋予同类型的值。</p></li></ol><p><strong>centos steam9系统中支持的shell情况，有如下种类</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/shells      </span></span><br><span class="line">/bin/sh                                    </span><br><span class="line">/bin/bash                                      </span><br><span class="line">/usr/bin/sh                                </span><br><span class="line">/usr/bin/bash </span><br></pre></td></tr></table></figure><p><strong>默认的sh解释器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /usr/bin/sh                               lrwxrwxrwx. 1 root root 4 Nov 24 22:22 /usr/bin/sh -&gt; bash</span></span><br></pre></td></tr></table></figure><h3 id="其他脚本语言"><a href="#其他脚本语言" class="headerlink" title="其他脚本语言"></a>其他脚本语言</h3><ol><li>PHP是网页程序语言，专注于web页面开发，诸多开源产品，wordpress、discuz开源产品都是PHP开发</li><li>Perl语言，擅长支持强大的正则表达式，以及运维工具的开发</li><li>python语言，明星语言，不仅适用于脚本程序开发，也擅长web页面开发，如（系统后台，资产管理平台），爬虫程序开发，大量Linux运维工具也由python开发，甚至于游戏开发也使用</li></ol><h3 id="shell的优势"><a href="#shell的优势" class="headerlink" title="shell的优势"></a>shell的优势</h3><p>虽然有诸多脚本编程语言，但是对于Linux操作系统内部应用而言，shell是最好的工具，Linux底层命令都支持shell语句，以及结合三剑客（grep、sed、awk）进行高级用法。</p><ul><li>擅长系统管理脚本开发，如软件启停脚本、监控报警脚本、日志分析脚本</li></ul><p>每个语言都有自己擅长的地方，扬长避短，达到高效运维的目的是最合适的</p><p><strong>Linux默认shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $SHELL             </span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行shell脚本的方式</title>
      <link href="/2023/02/12/%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/02/12/%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="执行shell脚本的方式"><a href="#执行shell脚本的方式" class="headerlink" title="执行shell脚本的方式"></a>执行shell脚本的方式</h3><ol><li><p>bash script.sh 或 sh scripte.sh ，文件本身没权限执行，没 x 权限，则使用的方法，或脚本未指定 shebang ，重点推荐的方式</p></li><li><p>使用 绝对&#x2F;相对 路径执行脚本，需要文件含有 x 权限</p></li><li><p>source script.sh 或者 .script.sh ，代表 执行的含义，source等于点.</p></li><li><p>少见的用法，sh &lt; script.sh</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shebang</title>
      <link href="/2023/02/12/Shebang/"/>
      <url>/2023/02/12/Shebang/</url>
      
        <content type="html"><![CDATA[<h3 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a>Shebang</h3><p>计算机程序中， shebang 指的是出现在文本文件的第一行前两个字符 #!</p><p>在Unix系统中，程序会分析 shebang 后面的内容，作为解释器的指令，例如</p><ol><li><p>以 #!&#x2F;bin&#x2F;bash 开头的文件，程序在执行的时候会调用 &#x2F;bin&#x2F;bash ，也就是bash解释器</p></li><li><p>以 #!&#x2F;usr&#x2F;bin&#x2F;python 开头的文件，代表指定python解释器去执行</p></li><li><p>以 #!&#x2F;usr&#x2F;bin&#x2F;env 解释器名称，是一种在不同平台上都能正确找到解释器的方法</p></li></ol><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>如果脚本未指定 shebang ，脚本执行的时候，默认用当前shell去解释脚本，即$SHELL</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]<span class="comment"># echo $SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><ul><li><p>如果 shebang 指定了可执行的解释器，如 &#x2F;bin&#x2F;bash &#x2F;usr&#x2F;bin&#x2F;python ，脚本在执行时，文件名会作为参数传递给解释器</p></li><li><p>如果 #! 指定的解释程序没有可执行权限，则会报错“bad interpreter: Permission denied”。</p></li><li><p>如果 #! 指定的解释程序不是一个可执行文件，那么指定的解释程序会被忽略，转而交给当前的SHELL去执行这个脚本。</p></li><li><p>如果 #! 指定的解释程序不存在，那么会报错“bad interpreter: No such file or directory”。</p></li><li><p>#! 之后的解释程序，需要写其绝对路径（如：#!&#x2F;bin&#x2F;bash），它时不会自动到$PATH中寻找解释器的。</p></li><li><p>如果你使用 “bash test.sh”这样的命令来执行脚本，那么#!这一行将会被忽略掉，解释器当然时用命令行中显示指定的bash</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是shell脚本</title>
      <link href="/2023/02/12/%E4%BB%80%E4%B9%88%E6%98%AFshell%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/02/12/%E4%BB%80%E4%B9%88%E6%98%AFshell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是shell脚本"><a href="#什么是shell脚本" class="headerlink" title="什么是shell脚本?"></a>什么是shell脚本?</h3><p>当命令或者程序语句写在文件中，我们执行文件，读取其中的代码，这个程序文件就称之为shell脚本。在shell脚本里定义多条Linux命令以及循环控制语句，然后将这些Linux命令一次性执行完毕，执行脚本文件的方式称之为，非交互式方式。</p><p><strong>Windows中存在 <code>*.bat/</code> 批处理脚本</strong></p><p><strong>Linux中常用 <code>*.sh</code> 脚本文件   → 约定俗成</strong></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Squid代理服务</title>
      <link href="/2022/07/21/Squid%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/07/21/Squid%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Squid代理服务配置命令"><a href="#Squid代理服务配置命令" class="headerlink" title="Squid代理服务配置命令"></a>Squid代理服务配置命令</h3><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y squid</span><br></pre></td></tr></table></figure><h4 id="创建cache目录"><a href="#创建cache目录" class="headerlink" title="创建cache目录"></a>创建cache目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>   /cache</span><br><span class="line"><span class="built_in">chmod</span>  777 /cache</span><br><span class="line"><span class="built_in">chown</span>  squid:squid  /cache</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Vim /etc/squid/squid.conf</span><br><span class="line">56:  http_access allow all                                    </span><br><span class="line"><span class="comment">#允许所有可以访问</span></span><br><span class="line">59： http_port   192.168.1.254:8080                           </span><br><span class="line"><span class="comment">#改端口</span></span><br><span class="line">62： cache_dir ufs  /var/spool/squid  10240  16  256          </span><br><span class="line"><span class="comment">#缓存目录</span></span><br><span class="line">dns_nameservers   IP                            </span><br><span class="line"><span class="comment">#DNS服务器</span></span><br><span class="line">cache_mem    512  MB                           </span><br><span class="line"><span class="comment">#高速缓存</span></span><br><span class="line">cache_log    /var/logsquid/access.log              </span><br><span class="line"><span class="comment">#缓存日志</span></span><br><span class="line">cache_access_log  /var/log/squid/access.log</span><br><span class="line"><span class="comment">#缓存访问日志</span></span><br><span class="line">cache_store_log</span><br><span class="line"><span class="comment">#网页缓存日志 </span></span><br><span class="line">cache_effective_user </span><br><span class="line"><span class="comment">#设置squid的拥有者</span></span><br><span class="line">cache_effect_group</span><br><span class="line"><span class="comment">#设置squid所属组</span></span><br><span class="line">visible_hostname  192.168.65.10</span><br><span class="line"><span class="comment">#设置squid可见主机名</span></span><br><span class="line">cache_mgr  root@local.com    </span><br><span class="line"><span class="comment">#设置管理员E-mail地址</span></span><br><span class="line">redirect_children</span><br><span class="line"><span class="comment">#重定向器池进程数</span></span><br></pre></td></tr></table></figure><h4 id="初始化及重启服务"><a href="#初始化及重启服务" class="headerlink" title="初始化及重启服务"></a>初始化及重启服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">squid -Z</span><br><span class="line"><span class="comment">#初始化在 squid.conf 里配置的 cache 目录</span></span><br><span class="line">systemctl start squid</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> squid</span><br><span class="line"><span class="comment">#设置开机自启</span></span><br></pre></td></tr></table></figure><h3 id="Squid用户认证"><a href="#Squid用户认证" class="headerlink" title="Squid用户认证"></a>Squid用户认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">auth_param  basic program    /usr/lib64/squid/basic_ncsa_auth    /etc/squid/passwd 　</span><br><span class="line"><span class="comment">#指定认证程序以及账户文件</span></span><br><span class="line"><span class="comment">#注：/squid/squid_user(账户存储位置)</span></span><br><span class="line"></span><br><span class="line">auth_param basic children 5</span><br><span class="line"><span class="comment">#认证程序进程数</span></span><br><span class="line"></span><br><span class="line">auth_param  basic  realm  CangLuan  Squid</span><br><span class="line"><span class="comment">#客户端在使用代理是，输入密码时弹出的提示框中的描述文字</span></span><br><span class="line"></span><br><span class="line">Auth_param basic credentialsttl 5 hours</span><br><span class="line"><span class="comment">#用户名是否需要匹配大小</span></span><br><span class="line"></span><br><span class="line">http_access  allow  cangluan  </span><br><span class="line"><span class="comment">#允许cangluan中的成员访问</span></span><br><span class="line"></span><br><span class="line">acl  ncsa_users  proxy_auth   REQUIRED </span><br><span class="line"><span class="comment">#所有成功鉴权的用户都归于ncsa_users组。</span></span><br><span class="line"></span><br><span class="line">Acl badfile urlpath_regex -I /.mp3$ /.flv$</span><br><span class="line"><span class="comment">#禁止访问.mp3 .flv扩展名后缀的资源</span></span><br><span class="line"></span><br><span class="line">http_access deny badfile </span><br><span class="line"></span><br><span class="line">htpasswd  -c /etc/squid/passwords  <span class="built_in">test</span></span><br><span class="line"><span class="comment">#给用户创建密码</span></span><br></pre></td></tr></table></figure><h3 id="ACL控制语句"><a href="#ACL控制语句" class="headerlink" title="ACL控制语句"></a>ACL控制语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">acl mylan src 192.168.1.0/24 192.168.4.0/24</span><br><span class="line"><span class="comment">#客户机网段</span></span><br><span class="line"></span><br><span class="line">acl worktime time MTWHF 08:30-17:30</span><br><span class="line"><span class="comment">#周一至周五的工作时间段</span></span><br><span class="line"></span><br><span class="line">acl to_host dst 127.0.0.0/8</span><br><span class="line"><span class="comment">#目标地址</span></span><br><span class="line"></span><br><span class="line">acl mc20 maxconn 20</span><br><span class="line"><span class="comment">#最大并发连接20</span></span><br><span class="line"></span><br><span class="line">acl blackURL url_regex -i ^rtsp:// ^ emo://</span><br><span class="line"><span class="comment">#以rtsp://等开头的URL</span></span><br><span class="line"></span><br><span class="line">acl fileURL urlpath_regex -i .mp3$ .mp4$</span><br><span class="line"><span class="comment">#以.mp3、.mp4结尾的URL路径</span></span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="一、基本配置"><a href="#一、基本配置" class="headerlink" title="一、基本配置"></a>一、基本配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http_port 192.168.1.1:3128                  </span><br><span class="line"><span class="comment">#设置监听地址和端口，如果只是端口则表示监听所有地址。</span></span><br><span class="line"></span><br><span class="line">visible_hostname ren.com                  </span><br><span class="line"> <span class="comment">#可发现的主机名，给代理服务器设置一个名字。</span></span><br><span class="line"></span><br><span class="line">access_log /var/log/squid/access.log          </span><br><span class="line"> <span class="comment">#访问日志存放位置。</span></span><br><span class="line"></span><br><span class="line">coredump_dir /var/spool/squid            </span><br><span class="line"><span class="comment">#设置一个内核转存目录，当Squid挂掉的时候，会将内存中的数据写到该目录下，默认为/var/spool/squid。</span></span><br><span class="line"></span><br><span class="line">cache_mgr squiderror@test.com            </span><br><span class="line"><span class="comment">#设置一个邮箱，当用户使用代理服务器中出现问题，会在错误页面显示一个邮箱地址，用于用户反馈错误。</span></span><br><span class="line"></span><br><span class="line">reply_body_max_size  1024000 allow all       </span><br><span class="line"><span class="comment">#限制下载文件大小，单位为字节B。</span></span><br></pre></td></tr></table></figure><h4 id="二、优化配置"><a href="#二、优化配置" class="headerlink" title="二、优化配置"></a>二、优化配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cache_dir ufs /var/spool/squid  100 16 256     </span><br><span class="line"><span class="comment">#设置在本地磁盘设置一个缓存目录用于缓存数据。</span></span><br><span class="line">“ufs”表示缓存数据的存储格式；</span><br><span class="line">“/var/spool/squid”表示设置的缓存目录；</span><br><span class="line">“100”表示缓存目录占磁盘空间大小，单位为MB；</span><br><span class="line">“16”表示缓存数据的一级子目录个数为16个；</span><br><span class="line">“256”表示缓存数据的二级子目录个数为256个。</span><br><span class="line"></span><br><span class="line">cache_mem 1024MB                   </span><br><span class="line"><span class="comment">#缓存占物理内存大小。单位为MB。</span></span><br><span class="line"></span><br><span class="line">cache_swap_low 85                 </span><br><span class="line"><span class="comment">#缓存占Swap虚拟内存最低大小为85%。</span></span><br><span class="line"></span><br><span class="line">cache_swap_high 95                   </span><br><span class="line"><span class="comment">#缓存占Swap虚拟内存最高大小为95%。当缓存数据占内存大小到95%时，会自动删除旧数据释放内存空间到百分之85%。</span></span><br><span class="line"></span><br><span class="line">minimum_object_size 0KB               </span><br><span class="line"><span class="comment">#设置数据对象（页面数据）的最小大小，0表示不限制。</span></span><br><span class="line"></span><br><span class="line">maximum_object_size 4096KB  </span><br><span class="line"><span class="comment">#设置数据对象（页面数据）的最大大小，当大于4MB的数据在不会缓存到磁盘。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP服务</title>
      <link href="/2022/07/21/DHCP%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/07/21/DHCP%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="DHCP服务"><a href="#DHCP服务" class="headerlink" title="DHCP服务"></a>DHCP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install –y dhcp*DHCP所需的软件包</span><br><span class="line"><span class="built_in">cp</span> –p /usr/share/doc/dhcp.4.2.5/dhcp.conf.sample   /etc/dhcp/dhcpd.conf复制模板文件</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim / etc/dhcp/dhcpd.conf</span><br><span class="line"></span><br><span class="line">shared-network xxx&#123;           &#125;     超级作用域</span><br><span class="line">subnet 192.168.30.0   netmask 255.255.255.0&#123;</span><br><span class="line">option routers   192.168.30.1;     网关</span><br><span class="line">option nis-domain   ‘xxx.com’;    NIS域名</span><br><span class="line">option domain-name  ‘xxx.com’;   DNS域名</span><br><span class="line">option domain-name-servers  192.168.30.254;   DNS地址</span><br><span class="line">range dynamin-bootp 192.168.30.10   192.168.30.100; 地址池</span><br><span class="line">default-lease-time 21600  最短租期</span><br><span class="line">max-lease-time 43200  最长租期</span><br><span class="line">&#125;</span><br><span class="line">host client&#123;             保留</span><br><span class="line">   hardwareethernet  00:11:22:33:44:55;</span><br><span class="line">   fixed-address   192.168.30.40;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba服务配置</title>
      <link href="/2022/07/21/Samba%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/21/Samba%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装所需软件包：</span><br><span class="line">yum install –y samba samba-client</span><br><span class="line">systemctl restart smb</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编写配置文件：</span><br><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><table><thead><tr><th>map to guest&#x3D;bad user</th><th>实现无密码访问</th></tr></thead><tbody><tr><td>comment</td><td>描述该共享的名称</td></tr><tr><td>path</td><td>定义该共享的目录</td></tr><tr><td>browseable</td><td>指定共享的目录是否可浏览</td></tr><tr><td>writable</td><td>指定共享的目录是否有写入权限</td></tr><tr><td>readonly</td><td>指定共享的目录为只读权限</td></tr><tr><td>write list&#x3D;</td><td>指定哪些用户可以在该只读共享文件上有写的权限</td></tr><tr><td>public</td><td>指定是否可以允许Guest帐户访问</td></tr><tr><td>guest ok</td><td>通public相同，yes为允许guest访问</td></tr><tr><td>onlyguest</td><td>指定只有guest用户可以访问</td></tr><tr><td>valid users</td><td>指定访问该共享的用户</td></tr><tr><td>createmask&#x3D;</td><td>创建文件的权限</td></tr><tr><td>directorymask&#x3D;</td><td>创建目录的权限</td></tr><tr><td>forceuser&#x3D;</td><td>指定创建文件的默认属主</td></tr><tr><td>veto files &#x3D;&#x2F;<em>.exe&#x2F;</em>.com&#x2F;*.dll&#x2F;</td><td>限制上传某文件类型</td></tr><tr><td>veto files &#x3D;&#x2F;<em>root</em>.*&#x2F;</td><td>限制关键字</td></tr><tr><td>admin users &#x3D; hardy</td><td>samba的管理用户，默认是root</td></tr><tr><td>Null  password &#x3D; yes</td><td>是否允许空密码</td></tr><tr><td>invalid  users &#x3D; root</td><td>不可登陆用户</td></tr><tr><td>max connections &#x3D; 0</td><td>最大连接数</td></tr><tr><td>hide dot files &#x3D; yes</td><td>是否隐藏点文件</td></tr><tr><td>hide files &#x3D; &#x2F;<em>.java&#x2F;</em>.cpp&#x2F;</td><td>隐藏指定文件</td></tr></tbody></table><h3 id="给samba用户设置密码"><a href="#给samba用户设置密码" class="headerlink" title="给samba用户设置密码"></a>给samba用户设置密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd user1 </span><br><span class="line">smbpasswd  –a user1         </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFS配置</title>
      <link href="/2022/07/21/NFS%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/21/NFS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>首先创建共享文件，mkdir&#x2F;test 在下面创建index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装所需的软件包</span><br><span class="line">yum install –y nfs-utils</span><br><span class="line">vim /etc/exports</span><br></pre></td></tr></table></figure><blockquote><ol><li>   &#x2F;test      *(sync,rw,no_root_squash)      任何客户端都能访问</li><li>   &#x2F;test      192.168.65.0&#x2F;24(sync,rw,no_root_squash)  那一段可以访问</li><li>   &#x2F;test 192.168.65.10(sync,rw,no_root_squash)  那个ip可以访问</li></ol></blockquote><table><thead><tr><th>sync</th><th>数据同步</th></tr></thead><tbody><tr><td>async</td><td>NFS在写入数据前可以相应请求</td></tr><tr><td>ro</td><td>只读</td></tr><tr><td>rw</td><td>读写</td></tr><tr><td>all_squash</td><td>共享文件的UID和GID映射匿名用户anonymous，适合公用目录</td></tr><tr><td>no_all_squash</td><td>保留共享文件的UID和GID（默认）</td></tr><tr><td>root_squash</td><td>root用户的所有请求映射成如anonymous用户一样的权限（默认）</td></tr><tr><td>no_root_squash</td><td>root用户具有根目录的完全管理访问权限</td></tr><tr><td>anonuid&#x3D;xxx</td><td>指定NFS服务器&#x2F;etc&#x2F;passwd文件中匿名用户的UID</td></tr><tr><td>anongid&#x3D;xxx</td><td>指定NFS服务器&#x2F;etc&#x2F;passwd文件中匿名用户的GID</td></tr><tr><td>secure</td><td>NFS通过1024以下的安全TCP&#x2F;IP端口发送</td></tr><tr><td>insecure</td><td>NFS通过1024以上的端口发送</td></tr><tr><td>wdelay</td><td>如果多个用户要写入NFS目录，则归组写入（默认）</td></tr><tr><td>no_wdelay</td><td>如果多个用户要写入NFS目录，则立即写入，当使用async时，无需此设置</td></tr><tr><td>hide</td><td>在NFS共享目录中不共享其子目录</td></tr><tr><td>no_hide</td><td>共享NFS目录的子目录</td></tr><tr><td>subtree_check</td><td>如果共享子目录时，强制NFS检查父目录的权限（默认）</td></tr><tr><td>查看用户ID</td><td>id  用户    或者   id  -u   用户名</td></tr><tr><td>查看组ID</td><td>id  组      或者   id  -g   组名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启服务：</span><br><span class="line">systemctl restart rpcbind</span><br><span class="line">systemctl restart nfs</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install –y nfs-utils</span><br><span class="line">mount  –t  nfs +服务器的IP:/服务器共享文件   /挂在本机位置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理</title>
      <link href="/2022/07/21/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
      <url>/2022/07/21/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Fdisk-分区"><a href="#Fdisk-分区" class="headerlink" title="Fdisk 分区"></a>Fdisk 分区</h3><p>Fdisk  &#x2F;dev&#x2F;sdb   (拿一块盘举个例子)</p><table><thead><tr><th>n</th><th>创建一个分区</th></tr></thead><tbody><tr><td>d</td><td>删除一个分区</td></tr><tr><td>p</td><td>显示分区信息</td></tr><tr><td>d</td><td>删除一个分区</td></tr><tr><td>w</td><td>保存并退出</td></tr><tr><td>t</td><td>改变分区类型(ID)</td></tr><tr><td>a</td><td>标记某个分区为启动扇区</td></tr></tbody></table><h3 id="Raid卷"><a href="#Raid卷" class="headerlink" title="Raid卷"></a>Raid卷</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mdadm <span class="literal">-C</span> （创建） <span class="literal">-v</span>（显示过程） /dev/md0(等级) <span class="literal">-l0</span> (等级) <span class="literal">-cN</span>(每个单元的大小)  <span class="literal">-n3</span> （硬盘个数） /dev/sd[…]</span><br><span class="line">mkfs.xfs /dev/md0    格式化</span><br></pre></td></tr></table></figure><table><thead><tr><th>-C(大写)</th><th>表示创建的意思</th></tr></thead><tbody><tr><td>-v</td><td>显示创建过程中详细的事</td></tr><tr><td>-c(小写)N</td><td>N表示每个条带单元的大小，以KB为单位，默认为64KB （后面不能跟单位）</td></tr><tr><td>-n 3</td><td>3表示RAID成员的个数（硬盘个数）</td></tr></tbody></table><blockquote><p>raid0（带区卷）需2块以上硬盘<br>raid1（镜像卷）需2块以上（偶数）<br>raid5需3块硬盘</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdadm -a  /dev/md0 启用磁盘阵列 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdadm -D -s &gt;&gt;/etc/mdadm.conf   配置更新，将详细参数写入这个配置文件里</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdadm   /dev/md5  -a  /dev/sde    添加一块硬盘作raid5的热备盘。</span><br></pre></td></tr></table></figure><blockquote><p>详细参数<br>-A, –assemble：加入一个以前定义的阵列 （装配）<br>-B, –build：Build a legacy array without superblocks.<br>-C, –create：创建一个新的阵列<br>-Q, –query：查看一个device，判断它为一个 md device 或是 一个 md 阵列的一部分<br>-D, –detail：显示raid的详细信息<br>-E, –examine：打印 device 上的 md superblock 的内容<br>-F, –follow, –monitor：选择 Monitor 模式<br>-G, –grow：改变在用阵列的大小或形态<br>-h, –help：帮助信息，用在以上选项后，则显示该选项信息<br>–help-options<br>-V, –version<br>-v, –verbose：显示细节<br>-b, –brief：较少的细节。用于 –detail 和 –examine 选项<br>-f, –force<br>-c, –config&#x3D; ：指定配置文件，缺省为 &#x2F;etc&#x2F;mdadm&#x2F;mdadm.conf<br>-s, –scan：扫描配置文件或 &#x2F;proc&#x2F;mdstat以搜寻丢失的信息。配置文件&#x2F;etc&#x2F;mdadm.conf create 或 build 使用的选项:<br>-c, –chunk&#x3D;:Specify chunk size of kibibytes. 缺省为 64.<br>–rounding&#x3D;: Specify rounding factor for linear array (&#x3D;&#x3D;chunk size)<br>-l, –level&#x3D;:设定 raid level.<br>–create可用:linear, raid0, 0, stripe, raid1,1, mirror, raid4, 4, raid5, 5, raid6, 6, multipath, mp.<br>–build可用：linear, raid0, 0, stripe.<br>-p, –parity&#x3D;：设定 raid5 的奇偶校验规则:eft-asymmetric, left-symmetric, right-asymmetric, right-symmetric, la, ra, ls, rs.缺省为left-symmetric<br>–layout&#x3D;:类似于–parity<br>-n, –raid-devices&#x3D;:指定阵列中可用 device 数目，这个数目只能由 –grow 修改<br>-x, –spare-devices&#x3D;：指定初始阵列的富余device 数目<br>-z, –size&#x3D;：组建RAID1&#x2F;4&#x2F;5&#x2F;6后从每个device获取的空间总数<br>–assume-clean:目前仅用于 –build 选项<br>-R, –run:阵列中的某一部分出现在其他阵列或文件系统中时，mdadm会确认该阵列。此选项将不作确认。<br>-f, –force:通常mdadm不允许只用一个device 创建阵列，而且创建raid5时会使用一个device作为missing drive。此选项正相反。<br>-a, –auto{&#x3D;no,yes,md,mdp,part,p}{NN}：</p></blockquote><h3 id="LVM逻辑卷"><a href="#LVM逻辑卷" class="headerlink" title="LVM逻辑卷"></a>LVM逻辑卷</h3><blockquote><p>pvcraete &#x2F;dev&#x2F;sd….<br>vgcreate 卷组名  &#x2F;dev&#x2F;sd…<br>vgremove  移除卷组<br>-l 卷组上允许创建的最大 逻辑卷数<br>-p 卷组中允许添加的最大物理卷数<br>-s 卷组上的物理卷的PE（扩展）大小</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate  -s  -L  120M  -n    /dev/zhi/lv-zhi </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate  -s  新建系统快照</span><br></pre></td></tr></table></figure><blockquote><p>-s  创建snapshot （快照）<br>-n  快照名字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate  -L 逻辑卷大小 -n 逻辑卷名 卷组名</span><br></pre></td></tr></table></figure><blockquote><p>-l 卷扩展PE数<br>-L 卷容量<br>-I 条带容量（KB）<br>-i 条带化数用到的pv数量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove  /dev/卷组名/逻辑卷名</span><br></pre></td></tr></table></figure><blockquote><p>扩展:lvextend  -L  +大小  &#x2F;dev&#x2F;卷组名&#x2F;逻辑名<br>减少:lvreduce  -L  -大小  &#x2F;dev&#x2F;卷组名&#x2F;逻辑名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">（1）创建一个指定大小的lv，并指定名字为lv_2</span><br><span class="line">lvcreate  -L  2G  -n  lv_2  vg_1</span><br><span class="line"></span><br><span class="line">（2）创建一个占全部卷组大小的lv，并指定名字为lv_3（注意前提是vg并没有创建有lv）</span><br><span class="line">Lvcreate  -l  100%VG  -n  lv_3  vg_1</span><br><span class="line"></span><br><span class="line">（3）创建一个空闲空间80%大小的lv，并指定名字为lv_4(常用)</span><br><span class="line">lvcreate  -l  80%Free  -n  lv_4  vg_1</span><br></pre></td></tr></table></figure><h3 id="iscsi磁盘共享"><a href="#iscsi磁盘共享" class="headerlink" title="iscsi磁盘共享"></a>iscsi磁盘共享</h3><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install -y targetcli</span><br><span class="line">service target start</span><br><span class="line">targetcli</span><br><span class="line">/backstores/block  create 名称 /dev/sd….</span><br><span class="line">/iscsi create iqn.2019-10.com.域名:名称</span><br><span class="line">iscsi/ iqn.2019-10.com.域名:名称/tpg1/luns    create  /backstores/block/名称</span><br><span class="line">iscsi/ iqn.2019-10.com.域名:名称/tpg1/protals  create  +所装targetcli服务的IP</span><br><span class="line"></span><br><span class="line">iscsi/ iqn.2019-10.com.域名:名称/tpg1  <span class="built_in">set</span>   attribute   authentication=0</span><br><span class="line">iscsi/ iqn.2019-10.com.域名:名称/tpg1  <span class="built_in">set</span>   attribute   generate_node_acls=1</span><br><span class="line">iscsi/ iqn.2019-10.com.域名:名称/tpg1  <span class="built_in">set</span>   attribute   demo_mode_write_protect=0</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install –y iscsi*</span><br><span class="line">iscsiadm  –m discovery  –t st  –p +服务器IP</span><br><span class="line">iscsiadm  –m node  –T  iqn.2019-10.com.域名:名称 -l </span><br><span class="line">fdisk –l    查看</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos基本命令</title>
      <link href="/2022/07/21/Centos%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/21/Centos%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="vim的使用："><a href="#vim的使用：" class="headerlink" title="vim的使用："></a>vim的使用：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim -y</span><br></pre></td></tr></table></figure><table><thead><tr><th>x</th><th>保存退出</th></tr></thead><tbody><tr><td>q</td><td>退出，不保存</td></tr><tr><td>q！</td><td>强制退出，不保存</td></tr><tr><td>w</td><td>保存，但没退出</td></tr><tr><td>wq</td><td>保存并退出</td></tr><tr><td>wq！</td><td>强制保存并退出</td></tr></tbody></table><h3 id="配置网卡："><a href="#配置网卡：" class="headerlink" title="配置网卡："></a>配置网卡：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33（以实际网卡为准，可以用Tab补全）</span><br><span class="line"><span class="comment">#编辑网卡配置文件</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"><span class="comment">#网卡类型</span></span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="comment">#网卡获取IP地址的协议（dhcp/static）</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line"><span class="comment">#是否启动默认路由</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">NAME=ens33</span><br><span class="line"><span class="comment">#网卡名称</span></span><br><span class="line">UUID=ab2faa71-3836-42cb-bf9b-b56bbc8c31bd</span><br><span class="line">DEVICE=ens33</span><br><span class="line"><span class="comment">#网卡名称</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment">#设置开机启动网卡</span></span><br><span class="line">DNS1=x.x.x.x</span><br><span class="line"><span class="comment">#DNS</span></span><br><span class="line">IPADDR=x.x.x.x</span><br><span class="line"><span class="comment">#网卡IP地址</span></span><br><span class="line">NETMASK=x.x.x.x</span><br><span class="line"><span class="comment">#子网掩码</span></span><br><span class="line">GATEWAY=x.x.x.x</span><br><span class="line"><span class="comment">#默认网关IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Systemctl <span class="built_in">disable</span>  firewalld.service   开机禁止防火墙自动启动</span><br><span class="line">systemctl start firewalld.service      启动防火墙</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service     开机自动启动防火墙</span><br><span class="line">systemctl status  firewalld.service    查看防火墙状态</span><br></pre></td></tr></table></figure><h3 id="selinux："><a href="#selinux：" class="headerlink" title="selinux："></a>selinux：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getenforce 获取当前selinux状态</span><br><span class="line">setenforce 0临时关闭selinux</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian10的网络配置</title>
      <link href="/2022/07/21/Debian10%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/21/Debian10%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="一、配置文件方式"><a href="#一、配置文件方式" class="headerlink" title="一、配置文件方式"></a>一、配置文件方式</h4><p>1、编辑网卡配置文件interfaces</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br><span class="line">... </span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static address</span><br><span class="line">address 172.16.100.201/25</span><br><span class="line">gateway 172.16.100.254</span><br><span class="line"></span><br><span class="line"><span class="comment">#auto ens33 启动服务的时候激活网卡，ens33为网卡名称</span></span><br><span class="line"><span class="comment">#iface ens33 inet static 接口属性配置，支持static（静态）、dhcp（动态)、none（默认）模式 </span></span><br><span class="line"><span class="comment">#address，IP地址配置，支持IP/PREFIX方式 </span></span><br><span class="line"><span class="comment">#netmask，掩码 </span></span><br><span class="line"><span class="comment">#gateway，网关地址</span></span><br></pre></td></tr></table></figure><p>2、重启网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking</span><br><span class="line">systemctl restart network-manager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络系统管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/03/30/hello-world/"/>
      <url>/2016/03/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 作为日记加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
